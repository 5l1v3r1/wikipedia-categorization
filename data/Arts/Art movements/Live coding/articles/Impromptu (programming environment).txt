Impromptu is a Mac OS X programming environment for live coding. Impromptu is built around the Scheme language, which is a member of the Lisp family of languages. The source code of its core has been opened as the Extempore project. The environment allows to make changes to a program at runtime, so variables and functions may be redefined and the changes take effect immediately.  A programmer can also create and schedule code for future execution, as well as data events such as notes and graphics objects. Once an event is scheduled, execution continues. Looping is performed by using an idiom called "temporal recursion" which works by having a function asynchronously schedule a future call to itself as its final action. The library allows communicating with Audio Units for audio synthesis, and with graphics layers such as QuickTime, Quartz, Core Image, OpenGL for video composition. Code written in Objective-C can be called from the editor, and also Objective-C frameworks can perform calls to the Scheme interpreter. Impromptu's Scheme interpreter was initially built from the TinyScheme 1.35 baseline, but it has been substantially modified since to better suit the live coding context. A real-time garbage collector, and Objective-C integration were added. Also, a new statically typed language called the Extempore Language has been integrated to the system. This language is syntactically Scheme-like, but semantically closer to C, and is designed for real-time sound synthesis and other computationally heavy tasks. It provides type inference and is compiled to machine language by LLVM. A Study in Keith is a live coding performance in Impromptu by Andrew Sorensen. The first two minutes (1:56) are silent, while the performer writes the program that will produce the introduction of the piece. From then on, he modifies the code on the fly to evolve the composition. The core of Impromptu has been released as Extempore under a BSD style licence. It runs under both Linux and Mac OS X. It includes the Scheme interpreter, the Extempore Language compiler and the scheduler. The bindings to Apple libraries are absent, but the environment can interface with dynamic libraries.  