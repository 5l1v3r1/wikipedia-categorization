Live coding  (sometimes referred to as 'on-the-fly programming',  'just in time programming' and 'conversational programming') makes programming an integral part of the running program.  It is most prominent as a performing arts form and a creativity technique centred upon the writing of source code and the use of interactive programming in an improvised way. Live coding is often used to create sound and image based digital media, as well as light systems, improvised dance and poetry,   though is particularly prevalent in computer music usually as improvisation, although it could be combined with algorithmic composition.  Typically, the process of writing source code is made visible by projecting the computer screen in the audience space, with ways of visualising the code an area of active research.  Live coding techniques are also employed outside of performance, such as in producing sound for film  or audiovisual work for interactive art installations.  Also, the interconnection between computers makes possible to realize this practice networked in group.  The figure of live coder is who performs the act of live coding, usually "artists who want to learn to code, and coders who want to express themselves"  or in terms of Wang & Cook the "programmer/performer/composer".  Live coding is also an increasingly popular technique in programming-related lectures and conference presentations, and has been described as a "best practice" for computer science lectures by Mark Guzdial.  A range of techniques have been developed and appropriated for the purposes of live coding. The specific affordances of time-based media and live interaction with code has led to a number of novel developments and uses in programming language design. Through mutual embedding of imperative and declarative subsystems, the programming language SuperCollider  permitted to build a library that allows incomplete and provisional specifications which can be rewritten at runtime.  The ChucK language introduced an approach to "strongly timed" programming in 2002, embedding precision timing into control flow through a concise syntax. "Temporal recursion" was a term initially coined in relation to the Impromptu programming environment. Technical elements within a programming environment continue to locate compressors and recursion solutions, but timing had been a major issue. While the general form of a temporal recursion, being any asynchronous function recursion through time, is available to any event driven system, Impromptu has placed a special emphasis on this particular design pattern,  making it the centre piece of the concurrency architecture on that platform. Temporal recursion had repeatedly been used in SuperCollider and has since been implemented in the Fluxus environment. Another functional approach to the representation of time is shown in the Tidal pattern DSL,  which represents patterns as combinators operating over functions of time, similar to techniques in functional reactive programming.  Multi-user programming has developed in the context of group music-making, through the long development of the Republic system developed and employed by members of the network band PowerBooks Unplugged.  Republic is built into the SuperCollider language, and allows participants to collaboratively write live code that is distributed across the network of computers. There are similar efforts in other languages, such as the distributed tuple space used in the Impromptu language.  Additionally Overtone, Impromptu and Extempore support multi-user sessions, in which any number of programmers can intervene across the network in a given runtime process.  More recently systems as Extramuros are used to live coding in group through the technique of shared buffers of code written in SuperCollider and TidalCycles languages. The practice of writing code in group can be done in the same room through a local network or from remote places accessing a common server. Terms like laptop band, laptop orchestra, collaborative live coding or collective live coding are used to frame a networked live coding practice both in a local or remote way. TOPLAP (The (Temporary|Transnational|Terrestrial|Transdimensional) Organisation for the (Promotion|Proliferation|Permanence|Purity) of Live (Algorithm|Audio|Art|Artistic) Programming) is an informal organization formed in February 2004 to bring together the various communities that had formed around live coding environments.  The TOPLAP manifesto asserts several requirements for a TOPLAP compliant performance, in particular that performers' screens should be projected and not hidden.  A number of research projects and research groups have been created to explore live coding, often taking interdisciplinary approaches bridging the humanities and sciences. First efforts to both develop live coding systems and embed the emerging field in the broader theoretical context happened in the research project Artistic Interactivity in Hybrid Networks from 2005 to 2008, funded by the German Research Foundation.  Further, the Live Coding Research Network was funded by the UK Arts and Humanities Research Council for two years from February 2014, supporting a range of activities including symposia, workshops and an annual international conference called ICLC. In Madrid, since 2015 a group of experimentation on free software called Live Code Mad,  organizes regular meetings in order to experiment with different live coding platforms and languages. In Mexico, a workshop of live coding take place in Instituto Polit√©cnico Nacional at ESFM.  In USA there is a group called Live Code NYC.  Since 2014 the collective Algo0ritmos is working in Medellin, this group develop tools for live coding focused on live coding and free software.  