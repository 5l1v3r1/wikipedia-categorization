A design rationale is an explicit documentation of the reasons behind decisions made when designing a system or artifact. As initially developed by W.R. Kunz and Horst Rittel, design rationale seeks to provide argumentation-based structure to the political, collaborative process of addressing wicked problems.  A design rationale is the explicit listing of decisions made during a design process, and the reasons why those decisions were made.  Its primary goal is to support designers by providing a means to record and communicate the argumentation and reasoning behind the design process.   It should therefore include:  Several science areas are involved in the study of design rationales, such as computer science   cognitive science,  artificial intelligence,  and knowledge management.  For supporting design rationale, various frameworks have been proposed, such as QOC, DRCS, IBIS, and DRL. While argumentation formats can be traced back to Stephen Toulmin's work in the 1950s  datums, claims, warrants, backings and rebuttals, the origin of design rationale can be traced back to W.R. Kunz and Horst Rittel's  development of the Issue-Based Information System (IBIS) notation in 1970. Several variants on IBIS have since been proposed. The first Rationale Management System (RMS) was PROTOCOL, which supported PHI, which was followed by other PHI-based systems MIKROPOLIS and PHIDIAS. The first system providing IBIS support was Hans Dehlinger's STIEC.  Rittel developed a small system in 1983 (also not published) and the better known gIBIS (graphical IBIS) was developed in 1987.  Not all successful DR approaches involve structured argumentation. For example, Carroll and Rosson's Scenario-Claims Analysis approach  captures rationale in scenarios that describe how the system is used and how well the system features support the user goals. Carroll and Rosson's approach to design rationale is intended to help designers of computer software and hardware identify underlying design tradeoffs and make inferences about the impact of potential design interventions.  There are a number of ways to characterize DR approaches. Some key distinguishing features are how it is captured, how it is represented, and how it can be used. Rationale capture is the process of acquiring rationale information to a rationale management The choice of design rationale representation is very important to make sure that the rationales we capture is what we desire and we can use efficiently. According to the degree of formality, the approaches that are used to represent design rationale can be divided into three main categories: informal, semiformal, or formal.  In the informal representation, rationales can be recorded and captured by just using our traditionally accepted methods and media, such as word processors, audio and video records or even hand writings. However, these descriptions make it hard for automatic interpretation or other computer-based supports. In the formal representation, the rationale must be collected under a strict format so that the rationale can be interpreted and understood by computers. However, due to the strict format of rationale defined by formal representations, the contents can hardly be understood by human being and the process of capturing design rationale will require more efforts to finish, and therefore becomes more intrusive. Semiformal representations try to combine the advantages of informal and formal representations. On one hand, the information captured should be able to be processed by computers so that more computer based support can be provided. On the other hand, the procedure and method used to capture information of design rationale should not be very intrusive. In the system with a semiformal representation, the information expected is suggested and the users can capture rationale by following the instructions to either fill out the attributes according to some templates or just type into natural language descriptions.  Design rationale has the potential to be used in many different ways. One set of uses, defined by Burge and Brown (1998),  are: DR is used by research communities in software engineering, mechanical design, artificial intelligence, civil engineering, and human-computer interaction research. In software engineering, it could be used to support the designers ideas during requirement analysis, capturing and documenting design meetings and predicting possible issues due to new design approach.  In software architecture and outcourcing solution design, it can justify the outcome of architectural decisions and serve as a design guide.  In civil engineering, it helps to coordinate the variety of work that the designers do at the same time in different areas of a construction project. It also help the designers to understand and respect each other's ideas and resolve any possible issues.  The DR can also be used by the project managers to maintain their project plan and the project status up to date. Also, the project team members who missed a design meeting can refer back the DR to learn what was discussed on a particular topic. The unresolved issues captured in DR could be used to organize further meetings on those topics.  Design rationale helps the designers to avoid the same mistakes made in the previous design. This can also be helpful to avoid duplication of work.  In some cases DR could save time and money when a software system is upgraded from its previous versions.  There are several books and articles that provide excellent surveys of rationale approaches applied to HCI,  Engineering Design  and Software Engineering.  