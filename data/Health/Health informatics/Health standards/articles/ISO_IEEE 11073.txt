CEN ISO/IEEE 11073 Health informatics - Medical / health device communication standards enable communication between medical, health care and wellness devices and with external computer systems.  They provide automatic and detailed electronic data capture of client-related and vital signs information, and of device operational data. The standards are targeted at personal health and fitness devices (such as glucose monitors, pulse oximeters, weighing scales, medication dispensers and activity monitors) and at continuing and acute care devices (such as pulse oximeters, ventilators and infusion pumps).  They comprise a family of standards that can be layered together to provide connectivity optimized for the specific devices being interfaced.  There are four main partitions to the standards: In short: appropriate use of 11073 device communication standards can help deliver better health, fitness and care, more quickly, safely, and at a lower cost. 11073 standards are available freely to those actively involved in their development, others may purchase them.  For published and draft standards search for '11073' at: IEEE,  ISO   or CEN.    Standards may be purchased from the national standards organisation or bookstore (e.g. AFNOR, BSI, DIN, JIS, UNI, etc.). The ISO/IEEE 11073 Medical / Health Device Communication Standards are a family of ISO, IEEE, and CEN joint standards addressing the interoperability of medical devices. The ISO/IEEE 11073 standard family defines parts of a system, with which it is possible, to exchange and evaluate vital signs data between different medical devices, as well as remote control these devices. The 'core' standards are: 11073-10101, 11073-10201, 11073-20101 and 11073-30200 ISO/IEEE 11073 personal health device (PHD) standards are a group of standards addressing the interoperability of personal health devices (PHDs) such as weighing scales, blood pressure monitors, blood glucose monitors and the like. The standards draw upon earlier IEEE11073 standards work, but differ from this earlier work due to an emphasis on devices for personal use (rather than hospital use) and a simpler communications model. These are described in more detail at ISO/IEEE 11073 Personal Health Data (PHD) Standards Within this standard nomenclature codes are defined, these give the possibility to clearly identify objects and attributes in relation to the so-called OID-Code ( ). The nomenclature is divided in partitions, to demarcate codes with regards to content and functions. Programmatically these codes are defined as constants, those can be used by a pseudonym. example in C: This standard is the "heart" of VITAL. Within this, objects and their arrangement in a Domain Information Model for vital signs data transmission are defined. Beyond this the standard defines a service model for the standardized communication. The common background for assembly and transmission of objects and their attributes are defined in this standard. It's subdivided in a communication model and an information model. The communication model describes the layers 5 to 7 of the OSI 7-layer model. The information model defines the modeling, formatting and the syntax for transmission coding of the objects. All defined parts of this standard family are designed to allow communication according to this principle. The arrangement of two or more medical devices as a system, so that the components are possible to understand and to interact, are the basic idea of this principle. The agent is the part of the principle that is connected to the medical devices. It provides the data. The manager keeps a copy of the agent data, reacts on update events from them, and triggers events on the agent. In most use cases the manager is only used to remotely monitor and display agent data, but in some cases it may also remotely control the agents. Agents and manager are built in the same structure. This enables an agent to act as a manager and reverse. Besides the plain agent-manager application, hybrid systems over multiple stages are possible. This module is the interface between a proprietary (eventually native) protocol and the ISO/IEEE (VITAL) object world. It is not defined within the standard and as a result it can be implemented free. MMOs (Managed Medical Objects) are stored hierarchically within a tree structure in a form named Domain Information Model (DIM). This MMOs and their arrangement in the DIM are defined within this standard. The implementation of the MDIB (Medical Device Information Base) and their functionality is out of the scope of the standard. This module is subject to the standards ISO/IEC 15953 and ISO/IEC 15954. It has services available, that controlling the association assembly and disassembly. A possible association and their condition is negotiated here, no MMOs are transmitted over this module. Services for the data exchange of MMOs (Managed Medical Objects) between Agent-Manager systems, are defined in this module. This data exchange is highly dynamic. Objects are created, changed or deleted by services named CREATE, UPDATE, DELETE. Through reports, which can be defined detailed down to the single object attribute, it is possible to trigger complex operations in Agent or Manager, through this services. This layer contains the encoding of object data. Objects, groups of objects attributes or single attributes are encoded by ASN.1 representations, respectively the spezialization MDER (Medical Device encoding Rules). That layer controls connection at the session level. The central core of the standard is the so-called Domain Information Model. Objects containing vital-sign data representations and their relationships are defined in this model. Objects for additional services around vital signs data objects, are defined also here.  For content sensitive classification of the objects, they are divided into packages. The package that defines objects, to map medical vital signs data. There are different objects to store vital signs data in different ways. As an example the RealTimeSampleArray object for the management of e.g. ECG data be mentioned. This small package is related within the medical package. It is used for setting and administrating alert parameters to objects from the medical package. A representation of a medical device can be achieved with objects of this package. It contains concrete derivations of the abstract MDS (MedicalDevice System) object. One of these concrete derivations are ever the root object of a DIM tree. The Battery object and the Clock object are further objects in this package. The last one can be used for time synchronization of medical device data. Inside the control package, objects for the remote control of a medical device are defined. There are objects used for influenceing the modality of measuring (for example the SetRangeOperation object) and objects for direct remote control of medical devices (for example the ActivateOperation object). Other than the name supposes, in this package essential and ever used objects are defined. This package is built on so-called scanner objects in different derivations. Scanning data in other objects and generation of event reports, who can be sendend, is the sense of this objects. The scanner objects have a wide range of different attributes (e.g. scan interval, scan lists, scan period etc.), for a wide range of applications of the DIM. As an example, the FastPeriCfgScanner object (Fast Periodic Configurable Scanner) is specially constructed for the requirements of real-time data exchange in conjunction with the RealTimeSampleArray object to transmit live data from egc devices. The objects in these package contain information, which are responsible for basic communication profiles. These packages are developed very open, so that different communication profiles and interfaces to proprietary device interfaces can be built. Annotation by the author: From a historic view, the standard was developed for the first time in the early 90s, this package has to be reconstructed. Storing Patient related data in online or offline archives is the idea for objects in the archival package. For Example, the Patient Archive object can store vital signs data, demographic data and treatment data in one object. The patient package contains only one object, the Patient Demographics object. This object contains patient related data and can be set in relationship to an MDS object or one of the objects from the archive package, to give anonymous data the reference to patient data. The complete communication sequence can be very complex. This article should provide basic information, that can be described in more detail at a later time in a separate article. The finite state machine regulates the synchronization of an Agent Manager system over different conditions. A complete session roundtrip starts up with the disconnected state, is transferred by multiple stages to the initialized state, in what the actual data transfer shall be done, and ends with the disconnected state. During the association phase, the configuring state will be reached. In this condition Agent and Manager are to exchange object data for the first time.  In the process a MDSCreateEvent in the form of a report would be triggered. This report creates a copy of the MDS root object from the Agent MDIB in the Manager MDIB. Afterward a Contextscanner object is created in the Agent MDIB. This scanner object scans the complete MDIB and generates a report containing the complete Agent MDIB representation, except the MDS root object. The Manager evaluates this report and creates the objects defined here in his own MDIB copy. At this point the manager has an exact copy of the Agent MDIB. Both are now at configured state. The Common Medical Device Information Service Element (CMDISE) provides a GET service, to deliver data requested by the Manager. The Agent GET service retrieves a list of attribute ids. These ids identify explicit values within Agents MDIB. Now the Agent creates a report, containing the requested values. This report is sent back to the Manager. In an MDIB, additional objects shall be created through the CREATE service of CMDISE. The Manager requests the Agent through this service to create a scanner object itself, and to fix the scanner object on one or more values. Optional for example the scan interval for the data delivery can be set. The Agent creates the scanner object in his own MDIB and sends the Manager a response message. Now the Manager creates a copy of the scanner object in his MDIB. The data updates from Agent to Manager now occur automatically through the scanner object. Through CMDISE's DELETE service, the scanner object can be deleted, like all other MDIB objects. Android 4.0 implements support for IEEE 11073 via the BluetoothHealth class  NIST Standard Conformance Tools  11073 Web site ZigBee provides support for IEEE 1073 via the ZigBee Health Care Profile (ZHCP)  