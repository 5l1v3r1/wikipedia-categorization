{"parse":{"title":"Most frequent k characters","pageid":42232886,"revid":852636035,"text":{"*":"<div class=\"mw-parser-output\"><table class=\"plainlinks metadata ambox ambox-content ambox-multiple_issues compact-ambox\" role=\"presentation\"><tbody><tr><td class=\"mbox-image\"><div style=\"width:52px\"><img alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png\" width=\"40\" height=\"40\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/60px-Ambox_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/80px-Ambox_important.svg.png 2x\" data-file-width=\"40\" data-file-height=\"40\" /></div></td><td class=\"mbox-text\"><div class=\"mbox-text-span\"><div class=\"mw-collapsible\" style=\"width:95%; margin: 0.2em 0;\"><b>This article has multiple issues.</b> Please help <b><a class=\"external text\" href=\"//en.wikipedia.org/w/index.php?title=Most_frequent_k_characters&amp;action=edit\">improve it</a></b> or discuss these issues on the <b><a href=\"/w/index.php?title=Talk:Most_frequent_k_characters&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Talk:Most frequent k characters (page does not exist)\">talk page</a></b>. <small><i>(<a href=\"/wiki/Help:Maintenance_template_removal\" title=\"Help:Maintenance template removal\">Learn how and when to remove these template messages</a>)</i></small>\n<div class=\"mw-collapsible-content\" style=\"margin-top: 0.3em;\">\n      <table class=\"plainlinks metadata ambox ambox-content\" role=\"presentation\"><tbody><tr><td class=\"mbox-image\"><div style=\"width:52px\"><a href=\"/wiki/File:Question_book-new.svg\" class=\"image\"><img alt=\"Question book-new.svg\" src=\"//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png\" width=\"50\" height=\"39\" srcset=\"//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x\" data-file-width=\"512\" data-file-height=\"399\" /></a></div></td><td class=\"mbox-text\"><div class=\"mbox-text-span\">This article <b>may rely excessively on sources <a href=\"/wiki/Wikipedia:BLOGS\" class=\"mw-redirect\" title=\"Wikipedia:BLOGS\">too closely associated with the subject</a></b>, potentially preventing the article from being <a href=\"/wiki/Wikipedia:Verifiability\" title=\"Wikipedia:Verifiability\">verifiable</a> and <a href=\"/wiki/Wikipedia:Neutral_point_of_view\" title=\"Wikipedia:Neutral point of view\">neutral</a>.<span class=\"hide-when-compact\"> Please help <a class=\"external text\" href=\"//en.wikipedia.org/w/index.php?title=Most_frequent_k_characters&amp;action=edit\">improve it</a> by replacing them with more appropriate <a href=\"/wiki/Wikipedia:Citing_sources\" title=\"Wikipedia:Citing sources\">citations</a> to <a href=\"/wiki/Wikipedia:Identifying_and_using_independent_sources\" title=\"Wikipedia:Identifying and using independent sources\">reliable, independent, third-party sources</a>.</span>  <small><i>(March 2014)</i></small><small class=\"hide-when-compact\"><i> (<a href=\"/wiki/Help:Maintenance_template_removal\" title=\"Help:Maintenance template removal\">Learn how and when to remove this template message</a>)</i></small></div></td></tr></tbody></table>\n<table class=\"plainlinks metadata ambox ambox-content ambox-Notability\" role=\"presentation\"><tbody><tr><td class=\"mbox-image\"><div style=\"width:52px\"><img alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png\" width=\"40\" height=\"40\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/60px-Ambox_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/80px-Ambox_important.svg.png 2x\" data-file-width=\"40\" data-file-height=\"40\" /></div></td><td class=\"mbox-text\"><div class=\"mbox-text-span\">The topic of this article <b>may not meet Wikipedia's <a href=\"/wiki/Wikipedia:Notability\" title=\"Wikipedia:Notability\">general notability guideline</a></b>.<span class=\"hide-when-compact\"> Please help to establish notability by citing <a href=\"/wiki/Wikipedia:Identifying_reliable_sources\" title=\"Wikipedia:Identifying reliable sources\">reliable secondary sources</a> that are <a href=\"/wiki/Wikipedia:Identifying_and_using_independent_sources\" title=\"Wikipedia:Identifying and using independent sources\">independent</a> of the topic and provide significant coverage of it beyond a mere trivial mention. If notability cannot be established, the article is likely to be <a href=\"/wiki/Wikipedia:Merging\" title=\"Wikipedia:Merging\">merged</a>, <a href=\"/wiki/Wikipedia:Redirect\" title=\"Wikipedia:Redirect\">redirected</a>, or <a href=\"/wiki/Wikipedia:Deletion_policy\" title=\"Wikipedia:Deletion policy\">deleted</a>.<br /><small><span class=\"plainlinks\"><i>Find sources:</i>&#160;<a rel=\"nofollow\" class=\"external text\" href=\"//www.google.com/search?as_eq=wikipedia&amp;q=%22Most+frequent+k+characters%22&amp;num=50\">\"Most frequent k characters\"</a>&#160;\u2013&#160;<a rel=\"nofollow\" class=\"external text\" href=\"//www.google.com/search?tbm=nws&amp;q=%22Most+frequent+k+characters%22+-wikipedia\">news</a>&#160;<b>\u00b7</b> <a rel=\"nofollow\" class=\"external text\" href=\"//www.google.com/search?&amp;q=%22Most+frequent+k+characters%22+site:news.google.com/newspapers&amp;source=newspapers\">newspapers</a>&#160;<b>\u00b7</b> <a rel=\"nofollow\" class=\"external text\" href=\"//www.google.com/search?tbs=bks:1&amp;q=%22Most+frequent+k+characters%22+-wikipedia\">books</a>&#160;<b>\u00b7</b> <a rel=\"nofollow\" class=\"external text\" href=\"//scholar.google.com/scholar?q=%22Most+frequent+k+characters%22\">scholar</a>&#160;<b>\u00b7</b> <a rel=\"nofollow\" class=\"external text\" href=\"https://www.jstor.org/action/doBasicSearch?Query=%22Most+frequent+k+characters%22&amp;acc=on&amp;wc=on\">JSTOR</a></span></small></span>  <small><i>(March 2014)</i></small><small class=\"hide-when-compact\"><i> (<a href=\"/wiki/Help:Maintenance_template_removal\" title=\"Help:Maintenance template removal\">Learn how and when to remove this template message</a>)</i></small></div></td></tr></tbody></table>\n    </div>\n</div><small class=\"hide-when-compact\"><i> (<a href=\"/wiki/Help:Maintenance_template_removal\" title=\"Help:Maintenance template removal\">Learn how and when to remove this template message</a>)</i></small></div></td></tr></tbody></table>\n<p>In <a href=\"/wiki/Information_theory\" title=\"Information theory\">information theory</a>, <b>MostFreqKDistance</b> is a <a href=\"/wiki/String_metric\" title=\"String metric\">string metric</a> technique for quickly estimating how <a href=\"/wiki/Similarity_measure\" title=\"Similarity measure\">similar</a> two <a href=\"/wiki/Order_theory\" title=\"Order theory\">ordered sets</a> or <a href=\"/wiki/String_(computer_science)\" title=\"String (computer science)\">strings</a> are. The scheme was invented by Sadi Evren&#32;Seker&#160;(<a href=\"#CITEREFSeker2014\">2014</a>),<sup id=\"cite_ref-mfkc_1-0\" class=\"reference\"><a href=\"#cite_note-mfkc-1\">&#91;1&#93;</a></sup> and initially used in <a href=\"/wiki/Text_mining\" title=\"Text mining\">text mining</a> applications like <a href=\"/w/index.php?title=Author_recognition&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Author recognition (page does not exist)\">author recognition</a>.<sup id=\"cite_ref-mfkc_1-1\" class=\"reference\"><a href=\"#cite_note-mfkc-1\">&#91;1&#93;</a></sup>\nThe method is originally based on a hashing function MaxFreqKChars<sup id=\"cite_ref-hashfunc_2-0\" class=\"reference\"><a href=\"#cite_note-hashfunc-2\">&#91;2&#93;</a></sup> classical author recognition problem and idea first came out while studying on <a href=\"/wiki/Data_stream_mining\" title=\"Data stream mining\">data stream mining</a>.<sup id=\"cite_ref-author_3-0\" class=\"reference\"><a href=\"#cite_note-author-3\">&#91;3&#93;</a></sup> The algorithm is suitable for coding in any turing complete programming language.<sup id=\"cite_ref-Rosetta_4-0\" class=\"reference\"><a href=\"#cite_note-Rosetta-4\">&#91;4&#93;</a></sup>\n</p>\n<div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Definition\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Definition</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Most_frequent_K_hashing\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Most frequent K hashing</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Most_frequent_K_distance\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Most frequent K distance</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#String_distance_wrapper_function\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">String distance wrapper function</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Examples\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Examples</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Algorithm_complexity_and_comparison\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Algorithm complexity and comparison</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Time_complexity\"><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Time complexity</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Comparison\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">Comparison</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"#Success_on_text_mining\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Success on text mining</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"><a href=\"#See_also\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">See also</span></a></li>\n<li class=\"toclevel-1 tocsection-11\"><a href=\"#References\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">References</span></a></li>\n</ul>\n</div>\n\n<h2><span class=\"mw-headline\" id=\"Definition\">Definition</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=1\" title=\"Edit section: Definition\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Method has two steps.\n</p>\n<ul><li><a href=\"/wiki/Hash_function\" title=\"Hash function\">Hash</a> input strings str1 and str2 separately using MostFreqKHashing and output hstr1 and hstr2 respectively</li>\n<li>Calculate string distance (or string similarity coefficient) of two hash outputs, hstr1 and hstr2 and output an integer value</li></ul>\n<h3><span class=\"mw-headline\" id=\"Most_frequent_K_hashing\">Most frequent K hashing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=2\" title=\"Edit section: Most frequent K hashing\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The first step of algorithm is calculating the hashing based on the most frequent k characters. The hashing algorithm has below steps:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"n\">String</span> <span class=\"n\">function</span> <span class=\"nf\">MostFreqKHashing</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">inputString</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"n\">def</span> <span class=\"n\">string</span> <span class=\"n\">outputString</span>\n    <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"n\">distinct</span> <span class=\"n\">character</span>\n        <span class=\"n\">count</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">each</span> <span class=\"n\">character</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">K</span>\n        <span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">next</span> <span class=\"n\">most</span> <span class=\"n\">freq</span> <span class=\"n\">ith</span> <span class=\"nf\">character</span>  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">two</span> <span class=\"n\">chars</span> <span class=\"n\">have</span> <span class=\"n\">same</span> <span class=\"n\">frequency</span> <span class=\"n\">then</span> <span class=\"n\">get</span> <span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">occurrence</span> <span class=\"n\">in</span> <span class=\"n\">inputString</span><span class=\"o\">)</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">character</span>\n        <span class=\"n\">append</span> <span class=\"n\">to</span> <span class=\"n\">outputString</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">and</span> <span class=\"n\">count</span>\n    <span class=\"n\">end</span> <span class=\"k\">for</span>\n    <span class=\"k\">return</span> <span class=\"n\">outputString</span>\n</pre></div>\n<p>Above function, simply gets an input string and an integer K value and outputs the most frequent K characters from the input string. The only condition during the creation of output string is adding the first occurring character first, if the frequencies of two characters are equal. Similar to the most of <a href=\"/wiki/Hashing_function\" class=\"mw-redirect\" title=\"Hashing function\">hashing functions</a>, <i>Most Frequent K Hashing</i> is also a <a href=\"/wiki/One_way_function\" class=\"mw-redirect\" title=\"One way function\">one way function</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"Most_frequent_K_distance\">Most frequent K distance</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=3\" title=\"Edit section: Most frequent K distance\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The second step of algorithm works on two outputs from two different input strings and outputs the similarity coefficient (or distance metric).\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">function</span> <span class=\"nf\">MostFreqKSimilarity</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">inputStr1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">inputStr2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n    <span class=\"n\">def</span> <span class=\"kt\">int</span> <span class=\"n\">similarity</span>\n    <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">next</span> <span class=\"n\">character</span> <span class=\"n\">from</span> <span class=\"n\">inputStr1</span>\n        <span class=\"n\">lookup</span> <span class=\"n\">c</span> <span class=\"n\">in</span> <span class=\"n\">inputStr2</span>\n        <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"n\">is</span> <span class=\"kc\">null</span>\n             <span class=\"k\">continue</span>\n        <span class=\"n\">similarity</span> <span class=\"o\">+=</span> <span class=\"n\">frequency</span> <span class=\"n\">of</span> <span class=\"n\">c</span> <span class=\"n\">in</span> <span class=\"n\">inputStr1</span>\n    <span class=\"k\">return</span> <span class=\"n\">limit</span> <span class=\"o\">-</span> <span class=\"n\">similarity</span>\n</pre></div>\n<p>Above function, simply gets two input strings, previously outputted from the <code>MostFreqKHashing</code> function. From the most frequent k hashing function, the characters and their frequencies are returned. So, the similarity function calculates the similarity based on characters and their frequencies by checking if the same character appears on both strings. The limit is usually taken to be 10 and in the end the function returns the result of the subtraction of the sum of similarities from limit.\n</p><p>In some implementations, the distance metric is required instead of similarity coefficient. In order to convert the output of above similarity coefficient to distance metric, the output can be subtracted from any constant value (like the maximum possible output value). For the case, it is also possible to implement a <a href=\"/wiki/Wrapper_function\" title=\"Wrapper function\">wrapper function</a> over above two functions.\n</p>\n<h3><span class=\"mw-headline\" id=\"String_distance_wrapper_function\">String distance wrapper function</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=4\" title=\"Edit section: String distance wrapper function\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In order to calculate the distance between two strings, the below function can be implemented\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">function</span> <span class=\"nf\">MostFreqKSDF</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">inputStr1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">inputStr2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">maxDistance</span><span class=\"o\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">MostFreqKSimilarity</span><span class=\"o\">(</span><span class=\"n\">MostFreqKHashing</span><span class=\"o\">(</span><span class=\"n\">inputStr1</span><span class=\"o\">,</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">MostFreqKHashing</span><span class=\"o\">(</span><span class=\"n\">inputStr2</span><span class=\"o\">,</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">maxDistance</span><span class=\"o\">)</span>\n</pre></div>\n<p>Any call to above string distance function will supply two input strings and a maximum distance value. The function will calculate the similarity and subtract that value from the maximum possible distance. It can be considered as a simple <a href=\"/wiki/Additive_inverse\" title=\"Additive inverse\">additive inverse</a> of similarity.\n</p>\n<h2><span class=\"mw-headline\" id=\"Examples\">Examples</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=5\" title=\"Edit section: Examples\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Let's consider maximum 2 frequent hashing over two strings \u2018research\u2019 and \u2018seeking\u2019.\nMostFreqKHashing('research', 2) = r2e2\nbecause we have 2 'r' and 2 'e' characters with the highest frequency and we return in the order they appear in the string.\nMostFreqKHashing('seeking', 2) = e2s1\nAgain we have character 'e' with highest frequency and rest of the characters have same frequency of 1, so we return the first character of equal frequencies, which is 's'.\nFinally we make the comparison:\nMostFreqKSimilarity('r2e2', 'e2s1') = 2\nWe simply compared the outputs and only character occurring in both input is character 'e' and the occurrence in both input is 2.\nInstead running the sample step by step as above, we can simply run by using the string distance wrapper function as below:\nMostFreqKSDF('research', 'seeking', 2) = 2\n</p><p>Below table holds some sample runs between example inputs for K=2:\n</p>\n<table class=\"wikitable\">\n\n<tbody><tr>\n<th>Inputs\n</th>\n<th>Hash outputs\n</th>\n<th>SDF output (max from 10)\n</th></tr>\n<tr>\n<td>\n<pre>'night'\n'nacht'\n</pre>\n</td>\n<td>\n<pre>n1i1\nn1a1\n</pre>\n</td>\n<td>9\n</td></tr>\n<tr>\n<td>\n<pre>'my'\n'a'\n</pre>\n</td>\n<td>\n<pre>m1y1\na1NULL0\n</pre>\n</td>\n<td>10\n</td></tr>\n<tr>\n<td>\n<pre>\u2018research\u2019\n\u2018research\u2019\t\n</pre>\n</td>\n<td>\n<pre>r2e2\nr2e2\t\n</pre>\n</td>\n<td>6\n</td></tr>\n<tr>\n<td>\n<pre>\u2018aaaaabbbb\u2019\n\u2018ababababa\u2019\t\n</pre>\n</td>\n<td>\n<pre>a5b4\na5b4\t\n</pre>\n</td>\n<td>1\n</td></tr>\n<tr>\n<td>\n<pre>\u2018significant\u2019\n\u2018capabilities\u2019\t\n</pre>\n</td>\n<td>\n<pre>i3n2\ni3a2\t\n</pre>\n</td>\n<td>7\n</td></tr></tbody></table>\n<p>Method is also suitable for bioinformatics to compare the genetic strings like in <a href=\"/wiki/FASTA_format\" title=\"FASTA format\">FASTA format</a>.\n</p>\n<dl><dd>Str1 = LCLYTHIGRNIYYGSYLYSETWNTGIMLLLITMATAFMGYVLPWGQMSFWGATVITNLFSAIPYIGTNLV</dd></dl>\n<dl><dd>Str2 = EWIWGGFSVDKATLNRFFAFHFILPFTMVALAGVHLTFLHETGSNNPLGLTSDSDKIPFHPYYTIKDFLG</dd></dl>\n<dl><dd>MostFreqKHashing(str1, 2) = L9T8</dd></dl>\n<dl><dd>MostFreqKHashing(str2, 2) = F9L8</dd></dl>\n<dl><dd>MostFreqKSDF(str1, str2, 2, 100) = 83</dd></dl>\n<h2><span class=\"mw-headline\" id=\"Algorithm_complexity_and_comparison\">Algorithm complexity and comparison</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=6\" title=\"Edit section: Algorithm complexity and comparison\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The motivation behind algorithm is calculating the similarity between two input strings. So, the hashing function should be able to reduce the size of input and at the same time keep the characteristics of the input. Other hashing algorithms like <a href=\"/wiki/MD5\" title=\"MD5\">MD5</a> or <a href=\"/wiki/SHA-1\" title=\"SHA-1\">SHA-1</a>, the output is completely unrelated with the input and those hashing algorithms are not suitable for string similarity check.\n</p><p>On the other hand, string similarity functions like <a href=\"/wiki/Levenshtein_distance\" title=\"Levenshtein distance\">Levenshtein distance</a> have the algorithm complexity problem.\n</p><p>Also algorithms like <a href=\"/wiki/Hamming_distance\" title=\"Hamming distance\">Hamming distance</a>, <a href=\"/wiki/Jaccard_coefficient\" class=\"mw-redirect\" title=\"Jaccard coefficient\">Jaccard coefficient</a> or <a href=\"/wiki/Tanimoto_coefficient\" class=\"mw-redirect\" title=\"Tanimoto coefficient\">Tanimoto coefficient</a> have relatively low algorithm complexity but the success rate in <a href=\"/wiki/Text_mining\" title=\"Text mining\">text mining</a> studies are also low.\n</p>\n<h3><span class=\"mw-headline\" id=\"Time_complexity\">Time complexity</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=7\" title=\"Edit section: Time complexity\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The calculation of time complexity of 'most frequent k char string similarity' is quite simple. In order to get the maximum frequent K characters from a string, the first step is sorting the string in a lexiconical manner. After this sort, the input with highest occurrence can be achieved with a simple pass in linear time complexity. Since major classical sorting algorithms are working in O(nlogn) complexity like <a href=\"/wiki/Merge_sort\" title=\"Merge sort\">merge sort</a> or <a href=\"/wiki/Quick_sort\" class=\"mw-redirect\" title=\"Quick sort\">quick sort</a>, we can sort the first string in O(nlogn) and second string on O(mlogm) times. The total complexity would be O(nlog n ) + O (m log m) which is O(n log n) as the upper bound <a href=\"/wiki/Worst_case_analysis\" title=\"Worst case analysis\">worst case analysis</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"Comparison\">Comparison</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=8\" title=\"Edit section: Comparison\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Below table compares the complexity of algorithms:\n</p>\n<table class=\"wikitable\">\n\n<tbody><tr>\n<th>Algorithm\n</th>\n<th>Time complexity\n</th></tr>\n<tr>\n<td><a href=\"/wiki/Levenshtein_distance\" title=\"Levenshtein distance\">Levenshtein distance</a>\n</td>\n<td><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle O(nm)=O(n^{2})}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>O</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mi>m</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo>=</mo>\n        <mi>O</mi>\n        <mo stretchy=\"false\">(</mo>\n        <msup>\n          <mi>n</mi>\n          <mrow class=\"MJX-TeXAtom-ORD\">\n            <mn>2</mn>\n          </mrow>\n        </msup>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle O(nm)=O(n^{2})}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/bc2d603ede197c1657af9724f4b0c83ec24ea879\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:16.148ex; height:3.176ex;\" alt=\"O(nm) = O(n^2)\"/></span>\n</td></tr>\n<tr>\n<td><a href=\"/wiki/Jaccard_index\" title=\"Jaccard index\">Jaccard index</a>\n</td>\n<td><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle O(n+m)=O(n)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>O</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mi>m</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo>=</mo>\n        <mi>O</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle O(n+m)=O(n)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/b9fc87208aa91fd7d067b7328450631a2dfdcce5\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:17.934ex; height:2.843ex;\" alt=\"O(n+m) = O(n)\"/></span>\n</td></tr>\n<tr>\n<td>MostFreqKSDF\n</td>\n<td><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle O(n\\log n+m\\log m)=O(n\\log n)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>O</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mi>log</mi>\n        <mo>&#x2061;<!-- \u2061 --></mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mi>m</mi>\n        <mi>log</mi>\n        <mo>&#x2061;<!-- \u2061 --></mo>\n        <mi>m</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo>=</mo>\n        <mi>O</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mi>log</mi>\n        <mo>&#x2061;<!-- \u2061 --></mo>\n        <mi>n</mi>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle O(n\\log n+m\\log m)=O(n\\log n)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/388b59282a65e5a42c302339ffcc1b9860b7250f\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:34.002ex; height:2.843ex;\" alt=\"O(n \\log n + m \\log m) = O(n \\log n)\"/></span>\n</td></tr></tbody></table>\n<p>For the above table, n is the length of first string and m is the length of second string.\n</p>\n<h2><span class=\"mw-headline\" id=\"Success_on_text_mining\">Success on text mining</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=9\" title=\"Edit section: Success on text mining\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The success of string similarity algorithms are compared on a study. The study is based on IMDB62 dataset which is holding 1000 comment entries in <a href=\"/wiki/Internet_Movie_Database\" class=\"mw-redirect\" title=\"Internet Movie Database\">Internet Movie Database</a> from each 62 people. The data set is challenged for three string similarity functions and the success rates are as below:\n</p>\n<table class=\"wikitable\">\n\n<tbody><tr>\n<th>Algorithm\n</th>\n<th>Running time\n</th>\n<th>Error (RMSE)\n</th>\n<th>Error (RAE)\n</th></tr>\n<tr>\n<td><a href=\"/wiki/Levenshtein_distance\" title=\"Levenshtein distance\">Levenshtein distance</a>\n</td>\n<td>3647286.54 sec\n</td>\n<td>29\n</td>\n<td>0.47\n</td></tr>\n<tr>\n<td><a href=\"/wiki/Jaccard_index\" title=\"Jaccard index\">Jaccard index</a>\n</td>\n<td>228647.22 sec\n</td>\n<td>45\n</td>\n<td>0.68\n</td></tr>\n<tr>\n<td>MostFreqKSDF\n</td>\n<td>2712323.51 sec\n</td>\n<td>32\n</td>\n<td>0.49\n</td></tr></tbody></table>\n<p>The running times for author recognition are in seconds and the error rates are <a href=\"/wiki/Root_mean_square_error\" class=\"mw-redirect\" title=\"Root mean square error\">root mean square error</a> (RMSE) and <a href=\"/w/index.php?title=Relative_absolute_error&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Relative absolute error (page does not exist)\">relative absolute error</a> (RAE).\n</p><p>Above table shows, the 'most frequent <i>k</i> similarity' is better than <a href=\"/wiki/Levenshtein_distance\" title=\"Levenshtein distance\">Levenshtein distance</a> by time and <a href=\"/wiki/Jaccard_index\" title=\"Jaccard index\">Jaccard index</a> by success rate.\n</p><p>For the time performance and the success rates, the bitwise similarity functions like <a href=\"/wiki/Dice%27s_coefficient\" class=\"mw-redirect\" title=\"Dice&#39;s coefficient\">S\u00f8rensen\u2013Dice index</a>, <a href=\"/wiki/Tversky_index\" title=\"Tversky index\">Tversky index</a> or <a href=\"/wiki/Hamming_distance\" title=\"Hamming distance\">Hamming distance</a> are all in the same category with similar success rates and running times. There are obviously slight differences but the idea behind bitwise operation, loses the string operations like deletion or addition. For example, a single bit addition to the front of one of the input strings would yield a catastrophic result on the similarity for bitwise operators while Levenshtein distance is successfully catching.\n</p><p>Unfortunately, <a href=\"/wiki/Big_data\" title=\"Big data\">big data</a> studies often require a faster algorithm that still has an acceptable success rate. In such situations, the 'max frequent <i>k</i> characters' is a conceptually simpler algorithm that is also straight forward to implement.\n</p>\n<h2><span class=\"mw-headline\" id=\"See_also\">See also</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=10\" title=\"Edit section: See also\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<ul><li><a href=\"/wiki/Agrep\" title=\"Agrep\">agrep</a></li>\n<li><a href=\"/wiki/Approximate_string_matching\" title=\"Approximate string matching\">Approximate string matching</a></li>\n<li><a href=\"/wiki/Bitap_algorithm\" title=\"Bitap algorithm\">Bitap algorithm</a></li>\n<li><a href=\"/wiki/Damerau%E2%80%93Levenshtein_distance\" title=\"Damerau\u2013Levenshtein distance\">Damerau\u2013Levenshtein distance</a></li>\n<li><a href=\"/wiki/Diff\" title=\"Diff\">diff</a></li>\n<li><a href=\"/wiki/MinHash\" title=\"MinHash\">MinHash</a></li>\n<li><a href=\"/wiki/Dynamic_time_warping\" title=\"Dynamic time warping\">Dynamic time warping</a></li>\n<li><a href=\"/wiki/Euclidean_distance\" title=\"Euclidean distance\">Euclidean distance</a></li>\n<li><a href=\"/wiki/Fuzzy_string_searching\" class=\"mw-redirect\" title=\"Fuzzy string searching\">Fuzzy string searching</a></li>\n<li><a href=\"/wiki/Hamming_weight\" title=\"Hamming weight\">Hamming weight</a></li>\n<li><a href=\"/wiki/Hirschberg%27s_algorithm\" title=\"Hirschberg&#39;s algorithm\">Hirschberg's algorithm</a></li>\n<li><a href=\"/wiki/Sequence_homology\" title=\"Sequence homology\">Homology of sequences in genetics</a></li>\n<li><a href=\"/wiki/Hunt%E2%80%93McIlroy_algorithm\" title=\"Hunt\u2013McIlroy algorithm\">Hunt\u2013McIlroy algorithm</a></li>\n<li><a href=\"/wiki/Jaccard_index\" title=\"Jaccard index\">Jaccard index</a></li>\n<li><a href=\"/wiki/Jaro%E2%80%93Winkler_distance\" title=\"Jaro\u2013Winkler distance\">Jaro\u2013Winkler distance</a></li>\n<li><a href=\"/wiki/Levenshtein_distance\" title=\"Levenshtein distance\">Levenshtein distance</a></li>\n<li><a href=\"/wiki/Longest_common_subsequence_problem\" title=\"Longest common subsequence problem\">Longest common subsequence problem</a></li>\n<li><a href=\"/wiki/Lucene\" class=\"mw-redirect\" title=\"Lucene\">Lucene</a> (an open source search engine that implements edit distance)</li>\n<li><a href=\"/wiki/Manhattan_distance\" class=\"mw-redirect\" title=\"Manhattan distance\">Manhattan distance</a></li>\n<li><a href=\"/wiki/Metric_space\" title=\"Metric space\">Metric space</a></li>\n<li><a href=\"/wiki/Needleman%E2%80%93Wunsch_algorithm\" title=\"Needleman\u2013Wunsch algorithm\">Needleman\u2013Wunsch algorithm</a></li>\n<li><a href=\"/wiki/Optimal_matching\" title=\"Optimal matching\">Optimal matching</a> algorithm</li>\n<li><a href=\"/wiki/Sequence_alignment\" title=\"Sequence alignment\">Sequence alignment</a></li>\n<li>Similarity space on <a href=\"/wiki/Numerical_taxonomy\" title=\"Numerical taxonomy\">Numerical taxonomy</a></li>\n<li><a href=\"/wiki/Smith%E2%80%93Waterman_algorithm\" title=\"Smith\u2013Waterman algorithm\">Smith\u2013Waterman algorithm</a></li>\n<li><a href=\"/wiki/S%C3%B8rensen_similarity_index\" class=\"mw-redirect\" title=\"S\u00f8rensen similarity index\">S\u00f8rensen similarity index</a></li>\n<li><a href=\"/wiki/String_distance_metric\" class=\"mw-redirect\" title=\"String distance metric\">String distance metric</a></li>\n<li><a href=\"/wiki/String_similarity_function\" class=\"mw-redirect\" title=\"String similarity function\">String similarity function</a></li>\n<li><a href=\"/wiki/Wagner%E2%80%93Fischer_algorithm\" title=\"Wagner\u2013Fischer algorithm\">Wagner\u2013Fischer algorithm</a></li>\n<li><a href=\"/wiki/Locality-sensitive_hashing\" title=\"Locality-sensitive hashing\">Locality-sensitive hashing</a></li></ul>\n<h2><span class=\"mw-headline\" id=\"References\">References</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Most_frequent_k_characters&amp;action=edit&amp;section=11\" title=\"Edit section: References\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div class=\"reflist\" style=\"list-style-type: decimal;\">\n<div class=\"mw-references-wrap\"><ol class=\"references\">\n<li id=\"cite_note-mfkc-1\"><span class=\"mw-cite-backlink\">^ <a href=\"#cite_ref-mfkc_1-0\"><sup><i><b>a</b></i></sup></a> <a href=\"#cite_ref-mfkc_1-1\"><sup><i><b>b</b></i></sup></a></span> <span class=\"reference-text\"><cite class=\"citation journal\">Seker, Sadi Evren; Altun, Oguz; Ayan, Ugur; Mert, Cihan (2014). \"A Novel String Distance Function based on Most Frequent K Characters\". <i>International Journal of Machine Learning and Computing (IJMLC)</i>. International Association of Computer Science and Information Technology Press (IACSIT Press). <b>4</b> (2): 177\u2013183. <a href=\"/wiki/ArXiv\" title=\"ArXiv\">arXiv</a>:<span class=\"plainlinks\"><a rel=\"nofollow\" class=\"external text\" href=\"//arxiv.org/abs/1401.6596\">1401.6596</a>&#8239;<img alt=\"Freely accessible\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png\" title=\"Freely accessible\" width=\"9\" height=\"14\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/14px-Lock-green.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/18px-Lock-green.svg.png 2x\" data-file-width=\"512\" data-file-height=\"813\" /></span>. <a href=\"/wiki/Bibcode\" title=\"Bibcode\">Bibcode</a>:<a rel=\"nofollow\" class=\"external text\" href=\"http://adsabs.harvard.edu/abs/2014arXiv1401.6596E\">2014arXiv1401.6596E</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=International+Journal+of+Machine+Learning+and+Computing+%28IJMLC%29&amp;rft.atitle=A+Novel+String+Distance+Function+based+on+Most+Frequent+K+Characters&amp;rft.volume=4&amp;rft.issue=2&amp;rft.pages=177-183&amp;rft.date=2014&amp;rft_id=info%3Aarxiv%2F1401.6596&amp;rft_id=info%3Abibcode%2F2014arXiv1401.6596E&amp;rft.aulast=Seker&amp;rft.aufirst=Sadi+Evren&amp;rft.au=Altun%2C+Oguz&amp;rft.au=Ayan%2C+Ugur&amp;rft.au=Mert%2C+Cihan&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AMost+frequent+k+characters\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></span>\n</li>\n<li id=\"cite_note-hashfunc-2\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-hashfunc_2-0\">^</a></b></span> <span class=\"reference-text\"><cite class=\"citation journal\">Seker, Sadi Evren; Mert, Cihan (2013). <a rel=\"nofollow\" class=\"external text\" href=\"http://journal.ibsu.edu.ge/index.php/jtst/article/view/428\">\"A Novel Feature Hashing For Text Mining\"</a>. <i>Journal of Technical Science and Technologies</i>. <a href=\"/wiki/International_Black_Sea_University\" title=\"International Black Sea University\">International Black Sea University</a>. <b>2</b> (1): 37\u201341. <a href=\"/wiki/International_Standard_Serial_Number\" title=\"International Standard Serial Number\">ISSN</a>&#160;<a rel=\"nofollow\" class=\"external text\" href=\"//www.worldcat.org/issn/2298-0032\">2298-0032</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Journal+of+Technical+Science+and+Technologies&amp;rft.atitle=A+Novel+Feature+Hashing+For+Text+Mining&amp;rft.volume=2&amp;rft.issue=1&amp;rft.pages=37-41&amp;rft.date=2013&amp;rft.issn=2298-0032&amp;rft.aulast=Seker&amp;rft.aufirst=Sadi+Evren&amp;rft.au=Mert%2C+Cihan&amp;rft_id=http%3A%2F%2Fjournal.ibsu.edu.ge%2Findex.php%2Fjtst%2Farticle%2Fview%2F428&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AMost+frequent+k+characters\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></span>\n</li>\n<li id=\"cite_note-author-3\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-author_3-0\">^</a></b></span> <span class=\"reference-text\"><cite class=\"citation journal\">Seker, Sadi Evren; Al-Naami, Khaled; Khan, Latifur (2013). <a rel=\"nofollow\" class=\"external text\" href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&amp;arnumber=6642511\">\"Author attribution on streaming data\"</a>. <i>Information Reuse and Integration (IRI), 2013 IEEE 14th International Conference on, San Francisco, USA, August 14\u201316, 2013</i>. <a href=\"/wiki/IEEE\" class=\"mw-redirect\" title=\"IEEE\">IEEE</a>: 497\u2013503. <a href=\"/wiki/Digital_object_identifier\" title=\"Digital object identifier\">doi</a>:<a rel=\"nofollow\" class=\"external text\" href=\"//doi.org/10.1109/IRI.2013.6642511\">10.1109/IRI.2013.6642511</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Information+Reuse+and+Integration+%28IRI%29%2C+2013+IEEE+14th+International+Conference+on%2C+San+Francisco%2C+USA%2C+August+14%E2%80%9316%2C+2013&amp;rft.atitle=Author+attribution+on+streaming+data&amp;rft.pages=497-503&amp;rft.date=2013&amp;rft_id=info%3Adoi%2F10.1109%2FIRI.2013.6642511&amp;rft.aulast=Seker&amp;rft.aufirst=Sadi+Evren&amp;rft.au=Al-Naami%2C+Khaled&amp;rft.au=Khan%2C+Latifur&amp;rft_id=http%3A%2F%2Fieeexplore.ieee.org%2Fxpl%2FarticleDetails.jsp%3Ftp%3D%26arnumber%3D6642511&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AMost+frequent+k+characters\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></span>\n</li>\n<li id=\"cite_note-Rosetta-4\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-Rosetta_4-0\">^</a></b></span> <span class=\"reference-text\"><cite class=\"citation\"><a rel=\"nofollow\" class=\"external text\" href=\"http://rosettacode.org/wiki/Most_frequent_k_chars_distance\"><i>Rosetta Code: Most frequent k chars distance</i></a><span class=\"reference-accessdate\">, retrieved <span class=\"nowrap\">2014-10-16</span></span></cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Rosetta+Code%3A+Most+frequent+k+chars+distance&amp;rft_id=http%3A%2F%2Frosettacode.org%2Fwiki%2FMost_frequent_k_chars_distance&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AMost+frequent+k+characters\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></span>\n</li>\n</ol></div></div>\n\n<!-- \nNewPP limit report\nParsed by mw2248\nCached time: 20180916180011\nCache expiry: 1900800\nDynamic content: false\nCPU time usage: 0.180 seconds\nReal time usage: 0.316 seconds\nPreprocessor visited node count: 934/1000000\nPreprocessor generated node count: 0/1500000\nPost\u2010expand include size: 41703/2097152 bytes\nTemplate argument size: 9788/2097152 bytes\nHighest expansion depth: 16/40\nExpensive parser function count: 2/500\nUnstrip recursion depth: 0/20\nUnstrip post\u2010expand size: 10901/5000000 bytes\nNumber of Wikibase entities loaded: 0/400\nLua time usage: 0.071/10.000 seconds\nLua memory usage: 3.28 MB/50 MB\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%  205.968      1 -total\n 78.58%  161.850      3 Template:Ambox\n 55.15%  113.595      1 Template:Multiple_issues\n 36.34%   74.845      1 Template:Reflist\n 28.58%   58.862      1 Template:Notability\n 25.28%   52.072      3 Template:Cite_journal\n 15.20%   31.309      1 Template:Find_sources_mainspace\n  9.05%   18.643      1 Template:Third-party\n  5.57%   11.463      1 Template:Harvs\n  4.88%   10.059      1 Template:DMCA\n-->\n\n<!-- Saved in parser cache with key enwiki:pcache:idhash:42232886-0!canonical!math=5 and timestamp 20180916180011 and revision id 852636035\n -->\n</div>"},"langlinks":[],"categories":[{"sortkey":"","hidden":"","*":"Articles_lacking_reliable_references_from_March_2014"},{"sortkey":"","hidden":"","*":"All_articles_lacking_reliable_references"},{"sortkey":"","hidden":"","*":"Articles_with_topics_of_unclear_notability_from_March_2014"},{"sortkey":"","hidden":"","*":"All_articles_with_topics_of_unclear_notability"},{"sortkey":"","hidden":"","*":"Articles_with_multiple_maintenance_issues"},{"sortkey":"","*":"String_similarity_measures"},{"sortkey":"","*":"Dynamic_programming"},{"sortkey":"","hidden":"","*":"Articles_with_example_pseudocode"},{"sortkey":"","*":"Quantitative_linguistics"},{"sortkey":"","*":"Hash_functions"},{"sortkey":"","*":"Hashing"}],"links":[{"ns":14,"exists":"","*":"Category:Articles lacking reliable references from March 2014"},{"ns":14,"exists":"","*":"Category:Articles with topics of unclear notability from March 2014"},{"ns":0,"exists":"","*":"Additive inverse"},{"ns":0,"exists":"","*":"Agrep"},{"ns":0,"exists":"","*":"Approximate string matching"},{"ns":0,"exists":"","*":"ArXiv"},{"ns":0,"exists":"","*":"Bibcode"},{"ns":0,"exists":"","*":"Big data"},{"ns":0,"exists":"","*":"Bitap algorithm"},{"ns":0,"exists":"","*":"Damerau\u2013Levenshtein distance"},{"ns":0,"exists":"","*":"Data stream mining"},{"ns":0,"exists":"","*":"Dice's coefficient"},{"ns":0,"exists":"","*":"Diff"},{"ns":0,"exists":"","*":"Digital object identifier"},{"ns":0,"exists":"","*":"Dynamic time warping"},{"ns":0,"exists":"","*":"Euclidean distance"},{"ns":0,"exists":"","*":"FASTA format"},{"ns":0,"exists":"","*":"Fuzzy string searching"},{"ns":0,"exists":"","*":"Hamming distance"},{"ns":0,"exists":"","*":"Hamming weight"},{"ns":0,"exists":"","*":"Hash function"},{"ns":0,"exists":"","*":"Hashing function"},{"ns":0,"exists":"","*":"Hirschberg's algorithm"},{"ns":0,"exists":"","*":"Hunt\u2013McIlroy algorithm"},{"ns":0,"exists":"","*":"IEEE"},{"ns":0,"exists":"","*":"Information theory"},{"ns":0,"exists":"","*":"International Black Sea University"},{"ns":0,"exists":"","*":"International Standard Serial Number"},{"ns":0,"exists":"","*":"Internet Movie Database"},{"ns":0,"exists":"","*":"Jaccard coefficient"},{"ns":0,"exists":"","*":"Jaccard index"},{"ns":0,"exists":"","*":"Jaro\u2013Winkler distance"},{"ns":0,"exists":"","*":"Levenshtein distance"},{"ns":0,"exists":"","*":"Locality-sensitive hashing"},{"ns":0,"exists":"","*":"Longest common subsequence problem"},{"ns":0,"exists":"","*":"Lucene"},{"ns":0,"exists":"","*":"MD5"},{"ns":0,"exists":"","*":"Manhattan distance"},{"ns":0,"exists":"","*":"Merge sort"},{"ns":0,"exists":"","*":"Metric space"},{"ns":0,"exists":"","*":"MinHash"},{"ns":0,"exists":"","*":"Needleman\u2013Wunsch algorithm"},{"ns":0,"exists":"","*":"Numerical taxonomy"},{"ns":0,"exists":"","*":"One way function"},{"ns":0,"exists":"","*":"Optimal matching"},{"ns":0,"exists":"","*":"Order theory"},{"ns":0,"exists":"","*":"Quick sort"},{"ns":0,"exists":"","*":"Root mean square error"},{"ns":0,"exists":"","*":"SHA-1"},{"ns":0,"exists":"","*":"Sequence alignment"},{"ns":0,"exists":"","*":"Sequence homology"},{"ns":0,"exists":"","*":"Similarity measure"},{"ns":0,"exists":"","*":"Smith\u2013Waterman algorithm"},{"ns":0,"exists":"","*":"String (computer science)"},{"ns":0,"exists":"","*":"String distance metric"},{"ns":0,"exists":"","*":"String metric"},{"ns":0,"exists":"","*":"String similarity function"},{"ns":0,"exists":"","*":"S\u00f8rensen similarity index"},{"ns":0,"exists":"","*":"Tanimoto coefficient"},{"ns":0,"exists":"","*":"Text mining"},{"ns":0,"exists":"","*":"Tversky index"},{"ns":0,"exists":"","*":"Wagner\u2013Fischer algorithm"},{"ns":0,"exists":"","*":"Worst case analysis"},{"ns":0,"exists":"","*":"Wrapper function"},{"ns":0,"*":"Author recognition"},{"ns":0,"*":"Relative absolute error"},{"ns":4,"exists":"","*":"Wikipedia:BLOGS"},{"ns":4,"exists":"","*":"Wikipedia:Citing sources"},{"ns":4,"exists":"","*":"Wikipedia:Deletion policy"},{"ns":4,"exists":"","*":"Wikipedia:Identifying and using independent sources"},{"ns":4,"exists":"","*":"Wikipedia:Identifying reliable sources"},{"ns":4,"exists":"","*":"Wikipedia:Merging"},{"ns":4,"exists":"","*":"Wikipedia:Neutral point of view"},{"ns":4,"exists":"","*":"Wikipedia:Notability"},{"ns":4,"exists":"","*":"Wikipedia:Redirect"},{"ns":4,"exists":"","*":"Wikipedia:Verifiability"},{"ns":12,"exists":"","*":"Help:Maintenance template removal"},{"ns":1,"*":"Talk:Most frequent k characters"}],"templates":[{"ns":10,"exists":"","*":"Template:Multiple issues"},{"ns":10,"exists":"","*":"Template:Ambox"},{"ns":10,"exists":"","*":"Template:Third-party"},{"ns":10,"exists":"","*":"Template:DMCA"},{"ns":10,"exists":"","*":"Template:Dated maintenance category"},{"ns":10,"exists":"","*":"Template:FULLROOTPAGENAME"},{"ns":10,"exists":"","*":"Template:Ns has subpages"},{"ns":10,"exists":"","*":"Template:Notability"},{"ns":10,"exists":"","*":"Template:Find sources mainspace"},{"ns":10,"exists":"","*":"Template:Main other"},{"ns":10,"exists":"","*":"Template:Harvs"},{"ns":10,"exists":"","*":"Template:Harvard citations"},{"ns":10,"exists":"","*":"Template:Harvard citations/core"},{"ns":10,"exists":"","*":"Template:Reflist"},{"ns":10,"exists":"","*":"Template:Cite journal"},{"ns":10,"exists":"","*":"Template:Citation"},{"ns":828,"exists":"","*":"Module:Message box"},{"ns":828,"exists":"","*":"Module:No globals"},{"ns":828,"exists":"","*":"Module:Yesno"},{"ns":828,"exists":"","*":"Module:Arguments"},{"ns":828,"exists":"","*":"Module:Message box/configuration"},{"ns":828,"exists":"","*":"Module:Unsubst"},{"ns":828,"exists":"","*":"Module:Ns has subpages"},{"ns":828,"exists":"","*":"Module:String"},{"ns":828,"exists":"","*":"Module:Find sources"},{"ns":828,"exists":"","*":"Module:Find sources/config"},{"ns":828,"exists":"","*":"Module:Find sources/templates/Find sources mainspace"},{"ns":828,"exists":"","*":"Module:Find sources/links/google"},{"ns":828,"exists":"","*":"Module:Find sources/links/google news"},{"ns":828,"exists":"","*":"Module:Find sources/links/google newspapers"},{"ns":828,"exists":"","*":"Module:Find sources/links/google books"},{"ns":828,"exists":"","*":"Module:Find sources/links/google scholar"},{"ns":828,"exists":"","*":"Module:Find sources/links/jstor"},{"ns":828,"exists":"","*":"Module:Category handler"},{"ns":828,"exists":"","*":"Module:Category handler/data"},{"ns":828,"exists":"","*":"Module:Category handler/config"},{"ns":828,"exists":"","*":"Module:Category handler/shared"},{"ns":828,"exists":"","*":"Module:Category handler/blacklist"},{"ns":828,"exists":"","*":"Module:Namespace detect/data"},{"ns":828,"exists":"","*":"Module:Namespace detect/config"},{"ns":828,"exists":"","*":"Module:Check for unknown parameters"},{"ns":828,"exists":"","*":"Module:Citation/CS1"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Configuration"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Whitelist"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Utilities"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Date validation"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Identifiers"},{"ns":828,"exists":"","*":"Module:Citation/CS1/COinS"}],"images":["Lock-green.svg","Ambox_important.svg","Question_book-new.svg"],"externallinks":["//arxiv.org/abs/1401.6596","http://adsabs.harvard.edu/abs/2014arXiv1401.6596E","http://journal.ibsu.edu.ge/index.php/jtst/article/view/428","//www.worldcat.org/issn/2298-0032","http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=6642511","//doi.org/10.1109/IRI.2013.6642511","http://rosettacode.org/wiki/Most_frequent_k_chars_distance","//www.google.com/search?as_eq=wikipedia&q=%22Most+frequent+k+characters%22&num=50","//www.google.com/search?tbm=nws&q=%22Most+frequent+k+characters%22+-wikipedia","//www.google.com/search?&q=%22Most+frequent+k+characters%22+site:news.google.com/newspapers&source=newspapers","//www.google.com/search?tbs=bks:1&q=%22Most+frequent+k+characters%22+-wikipedia","//scholar.google.com/scholar?q=%22Most+frequent+k+characters%22","https://www.jstor.org/action/doBasicSearch?Query=%22Most+frequent+k+characters%22&acc=on&wc=on"],"sections":[{"toclevel":1,"level":"2","line":"Definition","number":"1","index":"1","fromtitle":"Most_frequent_k_characters","byteoffset":867,"anchor":"Definition"},{"toclevel":2,"level":"3","line":"Most frequent K hashing","number":"1.1","index":"2","fromtitle":"Most_frequent_k_characters","byteoffset":1160,"anchor":"Most_frequent_K_hashing"},{"toclevel":2,"level":"3","line":"Most frequent K distance","number":"1.2","index":"3","fromtitle":"Most_frequent_k_characters","byteoffset":2215,"anchor":"Most_frequent_K_distance"},{"toclevel":2,"level":"3","line":"String distance wrapper function","number":"1.3","index":"4","fromtitle":"Most_frequent_k_characters","byteoffset":3618,"anchor":"String_distance_wrapper_function"},{"toclevel":1,"level":"2","line":"Examples","number":"2","index":"5","fromtitle":"Most_frequent_k_characters","byteoffset":4272,"anchor":"Examples"},{"toclevel":1,"level":"2","line":"Algorithm complexity and comparison","number":"3","index":"6","fromtitle":"Most_frequent_k_characters","byteoffset":5860,"anchor":"Algorithm_complexity_and_comparison"},{"toclevel":2,"level":"3","line":"Time complexity","number":"3.1","index":"7","fromtitle":"Most_frequent_k_characters","byteoffset":6611,"anchor":"Time_complexity"},{"toclevel":2,"level":"3","line":"Comparison","number":"3.2","index":"8","fromtitle":"Most_frequent_k_characters","byteoffset":7282,"anchor":"Comparison"},{"toclevel":1,"level":"2","line":"Success on text mining","number":"4","index":"9","fromtitle":"Most_frequent_k_characters","byteoffset":7681,"anchor":"Success_on_text_mining"},{"toclevel":1,"level":"2","line":"See also","number":"5","index":"10","fromtitle":"Most_frequent_k_characters","byteoffset":9365,"anchor":"See_also"},{"toclevel":1,"level":"2","line":"References","number":"6","index":"11","fromtitle":"Most_frequent_k_characters","byteoffset":10284,"anchor":"References"}],"parsewarnings":[],"displaytitle":"Most frequent <i>k</i> characters","iwlinks":[],"properties":[{"name":"displaytitle","*":"Most frequent <i>k</i> characters"},{"name":"wikibase_item","*":"Q30588262"}]}}