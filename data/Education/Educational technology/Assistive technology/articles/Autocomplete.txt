Autocomplete, or word completion, is a feature in which an application predicts the rest of a word a user is typing. In graphical user interfaces, users can typically press the tab key to accept a suggestion or the down arrow key to accept one of several. Autocomplete speeds up human-computer interactions when it correctly predicts the word a user intends to enter after only a few characters have been typed into a text input field. It works best in domains with a limited number of possible words (such as in command line interpreters), when some words are much more common (such as when addressing an e-mail), or writing structured and predictable text (as in source code editors). Many autocomplete algorithms learn new words after the user has written them a few times, and can suggest alternatives based on the learned habits of the individual user. The original purpose of word prediction software was to help people with physical disabilities increase their typing speed,  as well as to help them decrease the number of keystrokes needed in order to complete a word or a sentence.  The need to increase speed is noted by the fact that people who use speech-generating devices generally produce speech at a rate that is less than 10% as fast as people who use oral speech.  But the function is also very useful for anybody who writes text, and especially useful for people who often use long and hard to spell technical or medical terms, like medical doctors. Autocomplete or word completion works so that when the writer writes the first letter or letters of a word, the program predicts one or more possible words as choices.  If the word he intends to write is included in the list he can select it, for example by using the number keys. If the word that the user wants is not predicted, the writer must enter the next letter of the word. At this time, the word choice(s) is altered so that the words provided begin with the same letters as those that have been selected. When the word that the user wants appears it is selected, and the word is inserted into the text.   In another form of word prediction, words most likely to follow the just written one are predicted, based on recent word pairs used.   Word prediction uses language modeling, where within a set vocabulary the words are most likely to occur are calculated.   Along with language modeling, basic word prediction on AAC devices is often coupled with a recency model, where words that are used more frequently by the AAC user are more likely to be predicted.   Word prediction software often also allows the user to enter their own words into the word prediction dictionaries either directly, or by "learning" words that have been written.   Some search returns related to genitals or other vulgar terms are often omitted from autocompletion technologies.  There are standalone tools that add autocomplete functionality to existing applications. These programs monitor user keystrokes and suggests a list of words based on first typed letter(s). Examples are Typingaid and Letmetype.   LetMeType, freeware, is no longer developed, the author has published the source code and allows anybody to continue development. Typingaid, also freeware, is actively developed. Intellicomplete, both a freeware and payware version, works only in certain programs which hook into the intellicomplete server program.  Many Autocomplete programs can also be used to create a Shorthand list.  The original autocomplete software was Smartype, which dates back to the late 1980s and is still available today.  It was initially developed for medical transcriptionists working in WordPerfect for MS/DOS, but it now functions for any application in any Windows or Web-based program. Shorthand[disambiguation needed], also called Autoreplace, is a related feature that involves automatic replacement of a particular string with another one, usually one that is longer and harder to type, as "myname" with "Lee John Nikolai François Al Rahman". This can also quietly fix simple typing errors, such as turning "teh" into "the". Several Autocomplete programs, standalone or integrated in text editors, based on word lists, also include a shorthand function for often used phrases. Context completion is a text editor feature, similar to word completion, which completes words (or entire phrases) based on the current context and context of other similar words within the same document, or within some training data set. The main advantage of context completion is the ability to predict anticipated words more precisely and even with no initial letters. The main disadvantage is the need of a training data set, which is typically larger for context completion than for simpler word completion. Most common use of context completion is seen in advanced programming language editors and IDEs, where training data set is inherently available and context completion makes more sense to the user than broad word completion would. Line completion is a type of context completion, first introduced by Juraj Simlovic in TED Notepad, in July 2006. The context in line completion is the current line, while current document poses as training data set. When user begins a line which starts with a frequently used phrase, the editor automatically completes it, up to the position where similar lines differ, or proposes a list of common continuations. In web browsers, autocomplete is done in the address bar (using items from the browser's history) and in text boxes on frequently used pages, such as a search engine's search box. Autocomplete for web addresses is particularly convenient because the full addresses are often long and difficult to type correctly. HTML5 has an autocomplete form attribute. In e-mail programs autocomplete is typically used to fill in the e-mail addresses of the intended recipients. Generally, there are a small number of frequently used e-mail addresses, hence it is relatively easy to use autocomplete to select among them. Like web addresses, e-mail addresses are often long, hence typing them completely is inconvenient. For instance, Microsoft Outlook Express will find addresses based on the name that is used in the address book.  Google's Gmail will find addresses by any string that occurs in the address or stored name. In search engines, autocomplete user interface features provide users with suggested queries or results as they type their query in the search box.  This is also commonly called autosuggest or incremental search.  This type of search often relies on matching algorithms that forgive entry errors such as phonetic Soundex algorithms or the language independent Levenshtein algorithm.  The challenge remains to search large indices or popular query lists in under a few milliseconds so that the user sees results pop up while typing. Autocomplete can have an adverse effect on individuals and businesses when negative search terms are suggested when a search takes place. Autocomplete has now become a part of reputation management as companies linked to negative search terms such as scam, complaints and fraud seek to alter the results. Google in particular have listed some of the aspects that affect how their algorithm works, but this is an area that is open to manipulation.  Autocomplete of source code is also known as code completion. In a source code editor autocomplete is greatly simplified by the regular structure of the programming languages. There are usually only a limited number of words meaningful in the current context or namespace, such as names of variables and functions. An example of code completion is Microsoft's IntelliSense design. It involves showing a pop-up list of possible completions for the current input prefix to allow the user to choose the right one. This is particularly useful in object-oriented programming because often the programmer will not know exactly what members a particular class has. Therefore, autocomplete then serves as a form of convenient documentation as well as an input method. Another beneficial feature of autocomplete for source code is that it encourages the programmers to use longer, more descriptive variable names incorporating both lower and upper case letters (CamelCase), hence making the source code more readable. Typing large words with many mixed cases like "numberOfWordsPerParagraph" can be difficult, but Autocomplete allows one to complete typing the word using a fraction of the keystrokes. Autocompletion in database query tools allows the user to autocomplete the table names in an SQL statement and column names of the tables referenced in the SQL statement. As text is typed into the editor, the context of the cursor within the SQL statement provides an indication of whether the user needs a table completion or a table column completion.  The table completion provides a list of tables available in the database server the user is connected to. The column completion provides a list of columns for only tables referenced in the SQL statement. SQL Server Management Studio provides autocomplete in query tools.  In many word processing programs, autocompletion decreases the amount of time spent typing repetitive words and phrases. The source material for autocompletion is either gathered from the rest of the current document or from a list of common words defined by the user. Currently Apache OpenOffice, Calligra Suite, KOffice, LibreOffice and Microsoft Office include support for this kind of autocompletion, as do advanced text editors such as Emacs and Vim. In a command-line interpreter, such as Unix's sh or bash, or Windows's cmd.exe or PowerShell, or in similar command line interfaces, autocomplete of command names and file names may be accomplished by keeping track of all the possible names of things the user may access. Here autocomplete is usually done by pressing the Tab ↹ key after typing the first several letters of the word. For example, if the only file in the current directory that starts with x is xLongFileName, the user may prefer to type x and autocomplete to the complete name. If there were another file name or command starting with x in the same scope, the user would type more letters or press the Tab key repeatedly to select the appropriate text. The efficiency of word completion is based on the average length of the words typed. If, for example, the text consists of programming languages which often have longNamesForSpecialFunctions(), completion is both useful and generally applied in editors specially geared towards programmer such as Vim. In different languages, word lengths can differ dramatically. Picking up on the above example, a soccer player in German is translated as a "Fussballspieler", with a length of 15 characters. This example illustrates that English is not the most efficient language for WC; this study  shows an average length for English words in a corpus of over 100,000 words to be 8.93, for Czech to be 10.55 and for German to be 13.24.  In addition, in some languages like German called fusional languages as well as agglutinative languages, words can be combined, creating even longer words. Authors who often use very long words, like medical doctors and chemists, obviously have even more use for Autocomplete (Word completion) software than other authors. Although research has shown that word prediction software does decrease the number of keystrokes needed and improves the written productivity of children with disabilities,  there are mixed results as to whether or not word prediction actually increases speed of output.    It is thought that the reason why word prediction does not always increase the rate of text entry is because of the increased cognitive load and requirement to move eye gaze from the keyboard to the monitor.  In order to reduce this cognitive load, parameters such as reducing the list to five likely words, and having a vertical layout of those words may be used.   The vertical layout is meant to keep head and eye movements to a minimum, and also gives additional visual cues because the word length becomes apparent.   Although many software developers believe that if the word prediction list follows the cursor, that this will reduce eye movements,  in a study of children with Spina Bifida by Tam, Reid, O'Keefe & Nauman (2002) it was shown that typing was more accurate, and that the children also preferred when the list appeared at the bottom edge of the screen, at the midline. Several studies have found that word prediction performance and satisfaction increases when the word list is closer to the keyboard, because of the decreased amount of eye-movements needed.  Software with word prediction is produced by multiple manufacturers. The software can be bought as an add-on to common programs such as Microsoft Word (for example, WordQ+SpeakQ, Typing Assistant,  Co:Writer,  Wivik,  Ghotit Dyslexia),  or as one of many features on an AAC device (PRC's Pathfinder,  Dynavox Systems,  Saltillo’s ChatPC products ). Some well known programs: Intellicomplete,  which is available in both a freeware and a payware version, but works only with programs which are made to work with it. Letmetype  and Typingaid  are both freeware programs which work in any text editor. An early version of autocompletion was described in 1967 by H. Christopher Longuet-Higgins in his Computer-Assisted Typewriter (CAT),  “such words as ‘BEGIN’ or ‘PROCEDURE’ or identifiers introduced by the programmer, would be automatically completed by the CAT after the programmer had typed only one or two symbols.” In 2016, New Zealand academic Christoph Bartneck was invited to provide a presentation at a ConferenceSeries predatory meeting,   the 2016 International Conference on Atomic and Nuclear Physics.  Bartneck has little knowledge of nuclear physics, and so used the iOS auto complete function to write the submission, choosing randomly from its suggestions after starting each sentence,  and submitted it under the name Iris Pear (a reference to Siri and Apple).   A sample sentence from the abstract for the resulting manuscript was: "The atoms of a better universe will have the right for the same as you are the way we shall have to be a great place for a great time to enjoy the day you are a wonderful person to your great time to take the fun and take a great time and enjoy the great day you will be a wonderful time for your parents and kids"  and the 516-word abstract contained the words "good" and "great" a combined total of 28 times (and it is available online).   Despite being obvious nonsense, the work was accepted within three hours of submission and a conference registration fee of US$1099 requested.    Bartneck commented that he was "reasonably certain that this is a money-making conference with little to no commitment to science," a comment he based on the poor quality of the review process and the high cost of attendance,  but also joked that "I know that iOS is a pretty good software, but reaching tenure has never been this close."  