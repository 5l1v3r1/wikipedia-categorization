Project Euler (named after Leonhard Euler) is a website dedicated to a series of computational problems intended to be solved with computer programs.   The project attracts adults and students interested in mathematics and computer programming.  Since its creation in 2001 by Colin Hughes, Project Euler has gained notability and popularity worldwide.  It includes over 600 problems,  with a new one added once every two weeks. Problems are of varying difficulty but each is solvable in less than a minute of CPU time using an efficient algorithm on a modestly powered computer.  As of  May 2018[update] Project Euler has about 800,000  users, from all over the world, who have solved at least one problem.  A forum specific to each question may be viewed after the user has correctly answered the given question.  Problems can be sorted on ID, number solved and difficulty. Participants can track their progress through achievement levels based on the number of problems solved. A new level is reached for every 25 problems solved. Special awards exist for solving special combinations of problems, for instance there is an award for solving fifty prime numbered problems. A special "Eulerians" level exists to track achievement based on the fastest fifty solvers of recent problems so that newer members can compete without solving older problems.  The first Project Euler problem is If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. Though this problem is much simpler than the typical problem, it serves to illustrate the potential difference that an efficient algorithm makes. The brute-force algorithm examines every natural number less than 1000 and keeps a running sum of those meeting the criteria. This method is simple to implement, as shown by the following pseudocode: For harder problems, it becomes increasingly important to find an efficient algorithm. For this problem, we can reduce 1000 operations to a few by using the inclusionâ€“exclusion principle and a closed-form summation formula. Here,                                                 s             u             m                                   k                             (         n         )                 {\displaystyle \mathrm {sum} _{k}(n)}     denotes the sum of multiples of                         k                 {\displaystyle k}     below                         n                 {\displaystyle n}    . In big O notation, the brute-force algorithm is O(n) and the efficient algorithm is O(1) (assuming constant time arithmetic operations). 