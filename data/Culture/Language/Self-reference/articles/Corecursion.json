{"parse":{"title":"Corecursion","pageid":1338683,"revid":837785206,"text":{"*":"<div class=\"mw-parser-output\"><div role=\"note\" class=\"hatnote navigation-not-searchable\">Not to be confused with <a href=\"/wiki/Mutual_recursion\" title=\"Mutual recursion\">Mutual recursion</a>.</div>\n<p>In <a href=\"/wiki/Computer_science\" title=\"Computer science\">computer science</a>, <b>corecursion</b> is a type of operation that is <a href=\"/wiki/Dual_(category_theory)\" title=\"Dual (category theory)\">dual</a> to <a href=\"/wiki/Recursion_(computer_science)\" title=\"Recursion (computer science)\">recursion</a>. Whereas recursion works analytically, starting on data further from a base case and breaking it down into smaller data and repeating until one reaches a base case, corecursion works synthetically, starting from a base case and building it up, iteratively producing data further removed from a base case. Put simply, corecursive algorithms use the data that they themselves produce, bit by bit, as they become available, and needed, to produce further bits of data. A similar but distinct concept is <i><a href=\"/wiki/Generative_recursion#Structural_versus_generative_recursion\" class=\"mw-redirect\" title=\"Generative recursion\">generative recursion</a></i> which may lack a definite \"direction\" inherent in corecursion and recursion.\n</p><p>Where recursion allows programs to operate on arbitrarily complex data, so long as they can be reduced to simple data (base cases), corecursion allows programs to produce arbitrarily complex and potentially infinite data structures, such as <a href=\"/wiki/Stream_(computing)\" title=\"Stream (computing)\">streams</a>, so long as it can be produced from simple data (base cases) in a sequence of <i>finite</i> steps. Where recursion may not terminate, never reaching a base state, corecursion starts from a base state, and thus produces subsequent steps deterministically, though it may proceed indefinitely (and thus not terminate under strict evaluation), or it may consume more than it produces and thus become non-<i>productive</i>. Many functions that are traditionally analyzed as recursive can alternatively, and arguably more naturally, be interpreted as corecursive functions that are terminated at a given stage, for example <a href=\"/wiki/Recurrence_relation\" title=\"Recurrence relation\">recurrence relations</a> such as the factorial.\n</p><p>Corecursion can produce both <a href=\"/wiki/Finite_set\" title=\"Finite set\">finite</a> and <a href=\"/wiki/Infinite_set\" title=\"Infinite set\">infinite</a> <a href=\"/wiki/Data_structure\" title=\"Data structure\">data structures</a> as results, and may employ <a href=\"/wiki/Self-reference\" title=\"Self-reference\">self-referential</a> data structures. Corecursion is often used in conjunction with <a href=\"/wiki/Lazy_evaluation\" title=\"Lazy evaluation\">lazy evaluation</a>, to produce only a finite subset of a potentially infinite structure (rather than trying to produce an entire infinite structure at once). Corecursion is a particularly important concept in <a href=\"/wiki/Functional_programming\" title=\"Functional programming\">functional programming</a>, where corecursion and <a href=\"/wiki/Codata_(computer_science)\" class=\"mw-redirect\" title=\"Codata (computer science)\">codata</a> allow <a href=\"/wiki/Total_language\" class=\"mw-redirect\" title=\"Total language\">total languages</a> to work with infinite data structures.\n</p>\n<div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Examples\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Examples</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Factorial\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Factorial</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Fibonacci_sequence\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Fibonacci sequence</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#Tree_traversal\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Tree traversal</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Definition\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Definition</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Discussion\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Discussion</span></a></li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#History\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">History</span></a></li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#See_also\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">See also</span></a></li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"#Notes\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">Notes</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"><a href=\"#References\"><span class=\"tocnumber\">7</span> <span class=\"toctext\">References</span></a></li>\n</ul>\n</div>\n\n<h2><span class=\"mw-headline\" id=\"Examples\">Examples</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=1\" title=\"Edit section: Examples\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Corecursion can be understood by contrast with recursion, which is more familiar. While corecursion is primarily of interest in functional programming, it can be illustrated using imperative programming, which is done below using the <a href=\"/wiki/Generator_(computer_programming)\" title=\"Generator (computer programming)\">generator</a> facility in Python. In these examples local variables are used, and <a href=\"/wiki/Assignment_(computer_science)\" title=\"Assignment (computer science)\">assigned values</a> imperatively (destructively), though these are not necessary in corecursion in pure functional programming. In pure functional programming, rather than assigning to local variables, these computed values form an invariable sequence, and prior values are accessed by self-reference (later values in the sequence reference earlier values in the sequence to be computed). The assignments simply express this in the imperative paradigm and explicitly specify where the computations happen, which serves to clarify the exposition.\n</p>\n<h3><span class=\"mw-headline\" id=\"Factorial\">Factorial</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=2\" title=\"Edit section: Factorial\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>A classic example of recursion is computing the factorial, which is defined recursively as <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle 0!:=1}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mn>0</mn>\n        <mo>!</mo>\n        <mo>:=</mo>\n        <mn>1</mn>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle 0!:=1}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/124a2efce5e14f1d66ae9a3dd1aeb199ec66ae4b\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.338ex; width:6.717ex; height:2.176ex;\" alt=\"0!:=1\"/></span> and <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle n!:=n\\times (n-1)!}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>n</mi>\n        <mo>!</mo>\n        <mo>:=</mo>\n        <mi>n</mi>\n        <mo>&#x00D7;<!-- \u00d7 --></mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>&#x2212;<!-- \u2212 --></mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n        <mo>!</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle n!:=n\\times (n-1)!}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/9d00fa6d5dc16d175837b9cc7796b9323b590700\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:17.876ex; height:2.843ex;\" alt=\"n!:=n\\times (n-1)!\"/></span>\n</p><p>To <i>recursively</i> compute its result on a given input, a recursive function calls (a copy of) <i>itself</i> with a different (\"smaller\" in some way) input and uses the result of this call to construct its result. The recursive call does the same, unless the <i>base case</i> has been reached. Thus a <a href=\"/wiki/Call_stack\" title=\"Call stack\">call stack</a> develops in the process. For example, to compute <i>fac(3)</i>, this recursively calls in turn <i>fac(2)</i>, <i>fac(1)</i>, <i>fac(0)</i> (\"winding up\" the stack), at which point recursion terminates with <i>fac(0) = 1</i>, and then the stack unwinds in reverse order and the results are calculated on the way back along the call stack to the initial call frame <i>fac(3)</i>, where the final result is calculated as <i>3*2 =: 6</i> and finally returned. In this example a function returns a single value.\n</p><p>This stack unwinding can be explicated, defining the factorial <i>corecursively</i>, as an <a href=\"/wiki/Iteration\" title=\"Iteration\">iterator</a>, where one <i>starts</i> with the case of <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle 1=:0!}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mn>1</mn>\n        <mo>=:</mo>\n        <mn>0</mn>\n        <mo>!</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle 1=:0!}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e7f6f01842b7ef0b2db8d22f094bd6af6d47f9cf\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.338ex; width:6.717ex; height:2.176ex;\" alt=\"1=:0!\"/></span>, then from this starting value constructs factorial values for increasing numbers <i>1, 2, 3...</i> as in the above recursive definition with \"time arrow\" reversed, as it were, by reading it <i>backwards</i> as <span class=\"nowrap\"><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle n!\\times (n+1)=:(n+1)!}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>n</mi>\n        <mo>!</mo>\n        <mo>&#x00D7;<!-- \u00d7 --></mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n        <mo>=:</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n        <mo>!</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle n!\\times (n+1)=:(n+1)!}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/d9e5fd95ade4642174331237bbf58dcabaa83bd1\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:23.688ex; height:2.843ex;\" alt=\"n!\\times (n+1)=:(n+1)!\"/></span>.</span> The corecursive algorithm thus defined produces a <i>stream</i> of <i>all</i> factorials. This may be concretely implemented as a <a href=\"/wiki/Generator_(computer_programming)\" title=\"Generator (computer programming)\">generator</a>. Symbolically, noting that computing next factorial value requires keeping track of both <i>n</i> and <i>f</i> (a previous factorial value), this can be represented as:\n</p>\n<dl><dd><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle n,f=(0,1):(n+1,f\\times (n+1))}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>n</mi>\n        <mo>,</mo>\n        <mi>f</mi>\n        <mo>=</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mn>0</mn>\n        <mo>,</mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n        <mo>:</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mn>1</mn>\n        <mo>,</mo>\n        <mi>f</mi>\n        <mo>&#x00D7;<!-- \u00d7 --></mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle n,f=(0,1):(n+1,f\\times (n+1))}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/38d0cd0e194526b36129dbddbf3ab85de39fdbb4\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:33.478ex; height:2.843ex;\" alt=\"n,f=(0,1):(n+1,f\\times (n+1))\"/></span></dd></dl>\n<p>or in <a href=\"/wiki/Haskell_(programming_language)\" title=\"Haskell (programming language)\">Haskell</a>, \n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span>  <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)))</span> <span class=\"p\">`</span><span class=\"n\">iterate</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n<p>meaning, \"starting from <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle n,f=0,1}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>n</mi>\n        <mo>,</mo>\n        <mi>f</mi>\n        <mo>=</mo>\n        <mn>0</mn>\n        <mo>,</mo>\n        <mn>1</mn>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle n,f=0,1}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/9f8d3c04b2bda4824ba603ab2e16b41d7cc91b98\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.671ex; width:10.165ex; height:2.509ex;\" alt=\"n,f=0,1\"/></span>, on each step the next values are calculated as <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle n+1,f\\times (n+1)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>n</mi>\n        <mo>+</mo>\n        <mn>1</mn>\n        <mo>,</mo>\n        <mi>f</mi>\n        <mo>&#x00D7;<!-- \u00d7 --></mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>n</mi>\n        <mo>+</mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle n+1,f\\times (n+1)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/84f8eb5032e8e931c6915347ebe487565a2c2347\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:17.757ex; height:2.843ex;\" alt=\"n+1,f\\times (n+1)\"/></span>\". This is mathematically equivalent and almost identical to the recursive definition, but the <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle +1}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mo>+</mo>\n        <mn>1</mn>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle +1}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/d04cf05c67d41d9f39dabf6a90722ce860a76958\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.505ex; width:2.971ex; height:2.343ex;\" alt=\"+1\"/></span> emphasizes that the factorial values are being built <i>up</i>, going forwards from the starting case, rather than being computed after first going backwards, <i>down</i> to the base case, with a <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle -1}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mo>&#x2212;<!-- \u2212 --></mo>\n        <mn>1</mn>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle -1}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/704fb0427140d054dd267925495e78164fee9aac\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.505ex; width:2.971ex; height:2.343ex;\" alt=\"-1\"/></span> decrement. Note also that the direct output of the corecursive function does not simply contain the factorial <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle n!}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>n</mi>\n        <mo>!</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle n!}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/bae971720be3cc9b8d82f4cdac89cb89877514a6\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.338ex; width:2.042ex; height:2.176ex;\" alt=\"n!\"/></span> values, but also includes for each value the auxiliary data of its index <i>n</i> in the sequence, so that any one specific result can be selected among them all, as and when needed.\n</p><p>Note the connection with <a href=\"/wiki/Denotational_semantics\" title=\"Denotational semantics\">denotational semantics</a>, where the <a href=\"/wiki/Denotational_semantics#Denotations_of_recursive_programs\" title=\"Denotational semantics\">denotations of recursive programs</a> is built up corecursively in this way.\n</p><p>In Python, a recursive factorial function can be defined as:<sup id=\"cite_ref-1\" class=\"reference\"><a href=\"#cite_note-1\">&#91;a&#93;</a></sup>\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n<p>This could then be called for example as <code>factorial(5)</code> to compute <i>5!</i>.\n</p><p>A corresponding corecursive generator can be defined as:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">factorials</span><span class=\"p\">():</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">f</span>\n        <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n<p>This generates an infinite stream of factorials in order; a finite portion of it can be produced by:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">n_factorials</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">f</span>\n        <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n<p>This could then be called to produce the factorials up to <i>5!</i> via:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">n_factorials</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre></div>\n<p>If we're only interested in a certain factorial, just the last value can be taken, or we can fuse the production and the access into one function,\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">nth_factorial</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n        <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">f</span>\n</pre></div>\n<p>As can be readily seen here, this is practically equivalent (just by substituting <code>return</code> for the only <code>yield</code> there) to the accumulator argument technique for <a href=\"/wiki/Tail_call\" title=\"Tail call\">tail recursion</a>, unwound into an explicit loop. Thus it can be said that the concept of corecursion is an explication of the embodiment of iterative computation processes by recursive definitions, where applicable.\n</p>\n<h3><span class=\"mw-headline\" id=\"Fibonacci_sequence\">Fibonacci sequence</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=3\" title=\"Edit section: Fibonacci sequence\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In the same way, the <a href=\"/wiki/Fibonacci_sequence\" class=\"mw-redirect\" title=\"Fibonacci sequence\">Fibonacci sequence</a> can be represented as:\n</p>\n<dl><dd><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle a,b=(0,1):(b,a+b)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>a</mi>\n        <mo>,</mo>\n        <mi>b</mi>\n        <mo>=</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mn>0</mn>\n        <mo>,</mo>\n        <mn>1</mn>\n        <mo stretchy=\"false\">)</mo>\n        <mo>:</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>b</mi>\n        <mo>,</mo>\n        <mi>a</mi>\n        <mo>+</mo>\n        <mi>b</mi>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle a,b=(0,1):(b,a+b)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/7be4c8fe688d3a8b8e437ef198526bcb139134a7\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:22.374ex; height:2.843ex;\" alt=\"a,b=(0,1):(b,a+b)\"/></span></dd></dl>\n<p>Note that because the Fibonacci sequence is a <a href=\"/wiki/Recurrence_relation\" title=\"Recurrence relation\">recurrence relation</a> of order 2, the corecursive relation must track two successive terms, with the <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle (b,-)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mo stretchy=\"false\">(</mo>\n        <mi>b</mi>\n        <mo>,</mo>\n        <mo>&#x2212;<!-- \u2212 --></mo>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle (b,-)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/debc321dab967c192798db6f82476f8e4bec29f4\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:5.649ex; height:2.843ex;\" alt=\"(b,-)\"/></span> corresponding to shift forward by one step, and the <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle (-,a+b)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mo stretchy=\"false\">(</mo>\n        <mo>&#x2212;<!-- \u2212 --></mo>\n        <mo>,</mo>\n        <mi>a</mi>\n        <mo>+</mo>\n        <mi>b</mi>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle (-,a+b)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/fbb0903a56bd739906cd811eda31d61946107cef\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:9.719ex; height:2.843ex;\" alt=\"(-,a+b)\"/></span> corresponding to computing the next term. This can then be implemented as follows (using <a href=\"/wiki/Parallel_assignment\" class=\"mw-redirect\" title=\"Parallel assignment\">parallel assignment</a>):\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">fibonacci_sequence</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">a</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div><p>\nIn Haskell, </p><div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span> <span class=\"n\">map</span> <span class=\"n\">fst</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"p\">`</span><span class=\"n\">iterate</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</pre></div>\n<h3><span class=\"mw-headline\" id=\"Tree_traversal\">Tree traversal</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=4\" title=\"Edit section: Tree traversal\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><a href=\"/wiki/Tree_traversal\" title=\"Tree traversal\">Tree traversal</a> via a <a href=\"/wiki/Depth-first\" class=\"mw-redirect\" title=\"Depth-first\">depth-first</a> approach is a classic example of recursion. Dually, <a href=\"/wiki/Breadth-first\" class=\"mw-redirect\" title=\"Breadth-first\">breadth-first</a> traversal can very naturally be implemented via corecursion.\n</p><p>Without using recursion or corecursion specifically, one may traverse a tree by starting at the root node, placing its child nodes in a data structure, then iterating by removing node after node from the data structure while placing each removed node's children back into that data structure.<sup id=\"cite_ref-2\" class=\"reference\"><a href=\"#cite_note-2\">&#91;b&#93;</a></sup> If the data structure is a <a href=\"/wiki/Stack_(abstract_data_type)\" title=\"Stack (abstract data type)\">stack</a> (LIFO), this yields depth-first traversal, and  if the data structure is a <a href=\"/wiki/Queue_(abstract_data_type)\" title=\"Queue (abstract data type)\">queue</a> (FIFO), this yields breadth-first traversal.\n</p><p>Using recursion, a (post-order)<sup id=\"cite_ref-3\" class=\"reference\"><a href=\"#cite_note-3\">&#91;c&#93;</a></sup> depth-first traversal can be implemented by starting at the root node and recursively traversing each child subtree in turn (the subtree based at each child node) \u2013 the second child subtree does not start processing until the first child subtree is finished. Once a leaf node is reached or the children of a branch node have been exhausted, the node itself is visited (e.g., the value of the node itself is outputted). In this case, the call stack (of the recursive functions) acts as the stack that is iterated over.\n</p><p>Using corecursion, a breadth-first traversal can be implemented by starting at the root node, outputting its value,<sup id=\"cite_ref-4\" class=\"reference\"><a href=\"#cite_note-4\">&#91;d&#93;</a></sup> then breadth-first traversing the subtrees \u2013 i.e., passing on the <i>whole list</i> of subtrees to the next step (not a single subtree, as in the recursive approach) \u2013 at the next step outputting the value of all of their root nodes, then passing on their child subtrees, etc.<sup id=\"cite_ref-5\" class=\"reference\"><a href=\"#cite_note-5\">&#91;e&#93;</a></sup> In this case the generator function, indeed the output sequence itself, acts as the queue. As in the factorial example (above), where the auxiliary information of the index (which step one was at, <i>n</i>) was pushed forward, in addition to the actual output of <i>n</i>!, in this case the auxiliary information of the remaining subtrees is pushed forward, in addition to the actual output. Symbolically:\n</p>\n<dl><dd><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle v,t=([],FullTree):(RootValues,ChildTrees)}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>v</mi>\n        <mo>,</mo>\n        <mi>t</mi>\n        <mo>=</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mo stretchy=\"false\">[</mo>\n        <mo stretchy=\"false\">]</mo>\n        <mo>,</mo>\n        <mi>F</mi>\n        <mi>u</mi>\n        <mi>l</mi>\n        <mi>l</mi>\n        <mi>T</mi>\n        <mi>r</mi>\n        <mi>e</mi>\n        <mi>e</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo>:</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>R</mi>\n        <mi>o</mi>\n        <mi>o</mi>\n        <mi>t</mi>\n        <mi>V</mi>\n        <mi>a</mi>\n        <mi>l</mi>\n        <mi>u</mi>\n        <mi>e</mi>\n        <mi>s</mi>\n        <mo>,</mo>\n        <mi>C</mi>\n        <mi>h</mi>\n        <mi>i</mi>\n        <mi>l</mi>\n        <mi>d</mi>\n        <mi>T</mi>\n        <mi>r</mi>\n        <mi>e</mi>\n        <mi>e</mi>\n        <mi>s</mi>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle v,t=([],FullTree):(RootValues,ChildTrees)}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/c01994d0e3da9548a87769b7f1e4c0a485678546\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; width:48.158ex; height:2.843ex;\" alt=\"{\\displaystyle v,t=([],FullTree):(RootValues,ChildTrees)}\"/></span></dd></dl>\n<p>meaning that at each step, one outputs the list of values of root nodes, then proceeds to the child subtrees. Generating just the node values from this sequence simply requires discarding the auxiliary child tree data, then flattening the list of lists (values are initially grouped by level (depth); flattening (ungrouping) yields a flat linear list). In Haskell, \n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span> <span class=\"n\">concatMap</span> <span class=\"n\">fst</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">rootValues</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">childTrees</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"p\">`</span><span class=\"n\">iterate</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"n\">fullTree</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</pre></div>\n<p>These can be compared as follows. The recursive traversal handles a <i>leaf node</i> (at the <i>bottom</i>) as the base case (when there are no children, just output the value), and <i>analyzes</i> a tree into subtrees, traversing each in turn, eventually resulting in just leaf nodes \u2013 actual leaf nodes, and branch nodes whose children have already been dealt with (cut off <i>below</i>). By contrast, the corecursive traversal handles a <i>root node</i> (at the <i>top</i>) as the base case (given a node, first output the value), treats a tree as being <i>synthesized</i> of a root node and its children, then produces as auxiliary output a list of subtrees at each step, which are then the input for the next step \u2013 the child nodes of the original root are the root nodes at the next step, as their parents have already been dealt with (cut off <i>above</i>). Note also that in the recursive traversal there is a distinction between leaf nodes and branch nodes, while in the corecursive traversal there is no distinction, as each node is treated as the root node of the subtree it defines.\n</p><p>Notably, given an infinite tree,<sup id=\"cite_ref-6\" class=\"reference\"><a href=\"#cite_note-6\">&#91;f&#93;</a></sup> the corecursive breadth-first traversal will traverse all nodes, just as for a finite tree, while the recursive depth-first traversal will go down one branch and not traverse all nodes, and indeed if traversing post-order, as in this example (or in-order), it will visit no nodes at all, because it never reaches a leaf. This shows the usefulness of corecursion rather than recursion for dealing with infinite data structures.\n</p><p>In Python, this can be implemented as follows.<sup id=\"cite_ref-7\" class=\"reference\"><a href=\"#cite_note-7\">&#91;g&#93;</a></sup>\nThe usual post-order depth-first traversal can be defined as:<sup id=\"cite_ref-8\" class=\"reference\"><a href=\"#cite_note-8\">&#91;h&#93;</a></sup>\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">df</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">node</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">df</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n<p>This can then be called by <code>df(t)</code> to print the values of the nodes of the tree in post-order depth-first order.\n</p><p>The breadth-first corecursive generator can be defined as:<sup id=\"cite_ref-9\" class=\"reference\"><a href=\"#cite_note-9\">&#91;i&#93;</a></sup>\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">bf</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">):</span>\n    <span class=\"n\">tree_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tree</span><span class=\"p\">]</span>\n    <span class=\"k\">while</span> <span class=\"n\">tree_list</span><span class=\"p\">:</span>\n        <span class=\"n\">new_tree_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">tree</span> <span class=\"ow\">in</span> <span class=\"n\">tree_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">tree</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">new_tree_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n                <span class=\"n\">new_tree_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"n\">tree_list</span> <span class=\"o\">=</span> <span class=\"n\">new_tree_list</span>\n</pre></div>\n<p>This can then be called to print the values of the nodes of the tree in breadth-first order:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">bf</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>\n<h2><span class=\"mw-headline\" id=\"Definition\">Definition</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=5\" title=\"Edit section: Definition\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<table class=\"plainlinks metadata ambox ambox-style ambox-technical\" role=\"presentation\"><tbody><tr><td class=\"mbox-image\"><div style=\"width:52px\"><img alt=\"\" src=\"//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png\" width=\"40\" height=\"40\" srcset=\"//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/60px-Edit-clear.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/80px-Edit-clear.svg.png 2x\" data-file-width=\"48\" data-file-height=\"48\" /></div></td><td class=\"mbox-text\"><div class=\"mbox-text-span\">This section <b>may be too technical for most readers to understand</b>. Please <a class=\"external text\" href=\"//en.wikipedia.org/w/index.php?title=Corecursion&amp;action=edit\">help improve it</a> to <a href=\"/wiki/Wikipedia:Make_technical_articles_understandable\" title=\"Wikipedia:Make technical articles understandable\">make it understandable to non-experts</a>, without removing the technical details.  <small><i>(November 2010)</i></small><small class=\"hide-when-compact\"><i> (<a href=\"/wiki/Help:Maintenance_template_removal\" title=\"Help:Maintenance template removal\">Learn how and when to remove this template message</a>)</i></small></div></td></tr></tbody></table>\n<p><a href=\"/wiki/Initial_and_terminal_objects\" title=\"Initial and terminal objects\">Initial data types</a> can be defined as being the <a href=\"/wiki/Least_fixpoint\" class=\"mw-redirect\" title=\"Least fixpoint\">least fixpoint</a> (<a href=\"/wiki/Up_to_isomorphism\" class=\"mw-redirect\" title=\"Up to isomorphism\">up to isomorphism</a>) of some type equation; the <a href=\"/wiki/Isomorphism\" title=\"Isomorphism\">isomorphism</a> is then given by an <a href=\"/wiki/Initial_algebra\" title=\"Initial algebra\">initial</a> <a href=\"/wiki/F-algebra\" title=\"F-algebra\">algebra</a>. Dually, final (or terminal) data types can be defined as being the <a href=\"/wiki/Greatest_fixpoint\" class=\"mw-redirect\" title=\"Greatest fixpoint\">greatest fixpoint</a> of a type equation; the isomorphism is then given by a final <a href=\"/wiki/F-coalgebra\" title=\"F-coalgebra\">coalgebra</a>.\n</p><p>If the domain of discourse is the <a href=\"/wiki/Category_of_sets\" title=\"Category of sets\">category of sets</a> and total functions, then final data types may contain infinite, <a href=\"/wiki/Non-well-founded_set_theory\" title=\"Non-well-founded set theory\">non-wellfounded</a> values, whereas initial types do not.<sup id=\"cite_ref-10\" class=\"reference\"><a href=\"#cite_note-10\">&#91;1&#93;</a></sup><sup id=\"cite_ref-11\" class=\"reference\"><a href=\"#cite_note-11\">&#91;2&#93;</a></sup> On the other hand, if the domain of discourse is the category of <a href=\"/wiki/Complete_partial_order\" title=\"Complete partial order\">complete partial orders</a> and <a href=\"/wiki/Scott_continuity\" title=\"Scott continuity\">continuous functions</a>, which corresponds roughly to the <a href=\"/wiki/Haskell_(programming_language)\" title=\"Haskell (programming language)\">Haskell</a> programming language, then final types coincide with initial types, and the corresponding final coalgebra and initial algebra form an isomorphism.<sup id=\"cite_ref-12\" class=\"reference\"><a href=\"#cite_note-12\">&#91;3&#93;</a></sup>\n</p><p>Corecursion is then a technique for recursively defining functions whose range (codomain) is a final data type, dual to the way that ordinary <a href=\"/wiki/Recursion\" title=\"Recursion\">recursion</a> recursively defines functions whose domain is an initial data type.<sup id=\"cite_ref-13\" class=\"reference\"><a href=\"#cite_note-13\">&#91;4&#93;</a></sup>\n</p><p>The discussion below provides several examples in Haskell that distinguish corecursion. Roughly speaking, if one were to port these definitions to the category of sets, they would still be corecursive. This informal usage is consistent with existing textbooks about Haskell.<sup id=\"cite_ref-14\" class=\"reference\"><a href=\"#cite_note-14\">&#91;5&#93;</a></sup> Also note that the examples used in this article predate the attempts to define corecursion and explain what it is.\n</p>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=6\" title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<table class=\"plainlinks metadata ambox ambox-style ambox-Cleanup\" role=\"presentation\"><tbody><tr><td class=\"mbox-image\"><div style=\"width:52px\"><img alt=\"\" src=\"//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png\" width=\"40\" height=\"40\" srcset=\"//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/60px-Edit-clear.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/80px-Edit-clear.svg.png 2x\" data-file-width=\"48\" data-file-height=\"48\" /></div></td><td class=\"mbox-text\"><div class=\"mbox-text-span\">This section may <b>require <a href=\"/wiki/Wikipedia:Cleanup\" title=\"Wikipedia:Cleanup\">cleanup</a></b> to meet Wikipedia's <a href=\"/wiki/Wikipedia:Manual_of_Style\" title=\"Wikipedia:Manual of Style\">quality standards</a>. The specific problem is: <b>mix of discussion, examples, and related concepts</b><span class=\"hide-when-compact\"> Please help <a class=\"external text\" href=\"//en.wikipedia.org/w/index.php?title=Corecursion&amp;action=edit\">improve this section</a> if you can.</span>  <small><i>(July 2012)</i></small><small class=\"hide-when-compact\"><i> (<a href=\"/wiki/Help:Maintenance_template_removal\" title=\"Help:Maintenance template removal\">Learn how and when to remove this template message</a>)</i></small></div></td></tr></tbody></table>\n<table class=\"plainlinks metadata ambox ambox-content\" role=\"presentation\"><tbody><tr><td class=\"mbox-image\"><div style=\"width:52px\"><img alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png\" width=\"40\" height=\"40\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/60px-Ambox_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/80px-Ambox_important.svg.png 2x\" data-file-width=\"40\" data-file-height=\"40\" /></div></td><td class=\"mbox-text\"><div class=\"mbox-text-span\">This section <b>needs attention from an expert in Computer science</b>.<span class=\"hide-when-compact\"> Please add a <i>reason</i> or a <i>talk</i> parameter to this template to explain the issue with the section. <a href=\"/wiki/Wikipedia:WikiProject_Computer_science\" title=\"Wikipedia:WikiProject Computer science\">WikiProject Computer science</a> may be able to help recruit an expert.</span>  <small><i>(November 2010)</i></small></div></td></tr></tbody></table>\n<p>The rule for <i>primitive corecursion</i> on <a href=\"/wiki/Codata_(computer_science)\" class=\"mw-redirect\" title=\"Codata (computer science)\">codata</a> is the dual to that for <a href=\"/wiki/Primitive_recursion\" class=\"mw-redirect\" title=\"Primitive recursion\">primitive recursion</a> on data. Instead of descending on the argument by <a href=\"/wiki/Pattern-matching\" class=\"mw-redirect\" title=\"Pattern-matching\">pattern-matching</a> on its constructors (that <i>were called up before</i>, somewhere, so we receive a ready-made datum and get at its constituent sub-parts, i.e. \"fields\"), we ascend on the result by filling-in its \"destructors\" (or \"observers\", that <i>will be called afterwards</i>, somewhere - so we're actually calling a constructor, creating another bit of the result to be observed later on). Thus corecursion <i>creates</i> (potentially infinite) codata, whereas ordinary recursion <i>analyses</i> (necessarily finite) data.  Ordinary recursion might not be applicable to the codata because it might not terminate.  Conversely, corecursion is not strictly necessary if the result type is data, because data must be finite.\n</p><p>In \"Programming with streams in Coq: a case study: the Sieve of Eratosthenes\"<sup id=\"cite_ref-15\" class=\"reference\"><a href=\"#cite_note-15\">&#91;6&#93;</a></sup> we find\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"nf\">hd</span> <span class=\"p\">(</span><span class=\"n\">conc</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">a</span>               \n<span class=\"nf\">tl</span> <span class=\"p\">(</span><span class=\"n\">conc</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">s</span>\n\n<span class=\"p\">(</span><span class=\"n\">sieve</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"kr\">then</span> <span class=\"n\">sieve</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">tl</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n              <span class=\"kr\">else</span> <span class=\"n\">conc</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">sieve</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">tl</span> <span class=\"n\">s</span><span class=\"p\">))</span>\n\n<span class=\"nf\">hd</span> <span class=\"p\">(</span><span class=\"n\">primes</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"n\">s</span><span class=\"p\">)</span>          \n<span class=\"nf\">tl</span> <span class=\"p\">(</span><span class=\"n\">primes</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">primes</span> <span class=\"p\">(</span><span class=\"n\">sieve</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">tl</span> <span class=\"n\">s</span><span class=\"p\">))</span>\n</pre></div>\n<p>where primes \"are obtained by applying the primes operation to the stream (Enu 2)\". Following the above notation, the sequence of primes (with a throwaway 0 prefixed to it) and numbers streams being progressively sieved, can be represented as \n</p>\n<dl><dd><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"  alttext=\"{\\displaystyle p,s=(0,[2..]):(hd(s),sieve(hd(s),tl(s)))}\">\n  <semantics>\n    <mrow class=\"MJX-TeXAtom-ORD\">\n      <mstyle displaystyle=\"true\" scriptlevel=\"0\">\n        <mi>p</mi>\n        <mo>,</mo>\n        <mi>s</mi>\n        <mo>=</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mn>0</mn>\n        <mo>,</mo>\n        <mo stretchy=\"false\">[</mo>\n        <mn>2..</mn>\n        <mo stretchy=\"false\">]</mo>\n        <mo stretchy=\"false\">)</mo>\n        <mo>:</mo>\n        <mo stretchy=\"false\">(</mo>\n        <mi>h</mi>\n        <mi>d</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>s</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo>,</mo>\n        <mi>s</mi>\n        <mi>i</mi>\n        <mi>e</mi>\n        <mi>v</mi>\n        <mi>e</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>h</mi>\n        <mi>d</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>s</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo>,</mo>\n        <mi>t</mi>\n        <mi>l</mi>\n        <mo stretchy=\"false\">(</mo>\n        <mi>s</mi>\n        <mo stretchy=\"false\">)</mo>\n        <mo stretchy=\"false\">)</mo>\n        <mo stretchy=\"false\">)</mo>\n      </mstyle>\n    </mrow>\n    <annotation encoding=\"application/x-tex\">{\\displaystyle p,s=(0,[2..]):(hd(s),sieve(hd(s),tl(s)))}</annotation>\n  </semantics>\n</math></span><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/ab229486da06530a791f3e0e1161368565a38fc0\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -0.838ex; margin-left: -0.089ex; width:42.39ex; height:2.843ex;\" alt=\"{\\displaystyle p,s=(0,[2..]):(hd(s),sieve(hd(s),tl(s)))}\"/></span></dd></dl>\n<p>or in Haskell, \n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"kt\">:</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">sieve</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"p\">`</span><span class=\"n\">iterate</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"p\">])</span>\n</pre></div>\n<p>The authors discuss how the definition of <code>sieve</code> is not guaranteed always to be <i>productive</i>, and could become stuck e.g. if called with <code>[5,10..]</code> as the initial stream.\n</p><p>Here is another example in Haskell. The following definition produces the list of <a href=\"/wiki/Fibonacci_numbers\" class=\"mw-redirect\" title=\"Fibonacci numbers\">Fibonacci numbers</a> in linear time:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"nf\">fibs</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span> <span class=\"kt\">:</span> <span class=\"mi\">1</span> <span class=\"kt\">:</span> <span class=\"n\">zipWith</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"n\">fibs</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">fibs</span><span class=\"p\">)</span>\n</pre></div>\n<p>This infinite list depends on lazy evaluation;  elements are computed on an as-needed basis, and only finite prefixes are ever explicitly represented in memory. This feature allows algorithms on parts of codata to terminate; such techniques are an important part of Haskell programming.\n</p><p>This can be done in Python as well:<sup id=\"cite_ref-16\" class=\"reference\"><a href=\"#cite_note-16\">&#91;7&#93;</a></sup>\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">tee</span><span class=\"p\">,</span> <span class=\"n\">chain</span><span class=\"p\">,</span> <span class=\"n\">islice</span><span class=\"p\">,</span> <span class=\"n\">imap</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">deferred_output</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">output</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">i</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">tee</span><span class=\"p\">(</span><span class=\"n\">deferred_output</span><span class=\"p\">(),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">paired</span> <span class=\"o\">=</span> <span class=\"n\">imap</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">))</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">paired</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">fibonacci</span><span class=\"p\">(),</span> <span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>\n<p>The definition of <code>zipWith</code> can be inlined, leading to this:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"nf\">fibs</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span> <span class=\"kt\">:</span> <span class=\"mi\">1</span> <span class=\"kt\">:</span> <span class=\"n\">next</span> <span class=\"n\">fibs</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">next</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"kt\">:</span> <span class=\"n\">t</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"kt\">:</span><span class=\"kr\">_</span><span class=\"p\">))</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"kt\">:</span><span class=\"n\">next</span> <span class=\"n\">t</span>\n</pre></div>\n<p>This example employs a self-referential <i>data structure</i>.   Ordinary recursion makes use of self-referential <i>functions</i>,   but does not accommodate self-referential data.   However,  this is not essential to the Fibonacci example.    It can be rewritten as follows:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"nf\">fibs</span> <span class=\"ow\">=</span> <span class=\"n\">fibgen</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">fibgen</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">fibgen</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</pre></div>\n<p>This employs only self-referential <i>function</i> to construct the result. If it were used with strict list constructor it would be an example of runaway recursion, but with <a href=\"/wiki/Lazy_evaluation\" title=\"Lazy evaluation\">non-strict</a> list constructor this guarded recursion gradually produces an indefinitely defined list.\n</p><p><span id=\"corecursive_queue_breadth-first_tree_traversal\"></span>Corecursion need not produce an infinite object; a corecursive queue<sup id=\"cite_ref-17\" class=\"reference\"><a href=\"#cite_note-17\">&#91;8&#93;</a></sup> is a particularly good example of this phenomenon.   The following definition produces a <a href=\"/wiki/Breadth-first_search\" title=\"Breadth-first search\">breadth-first traversal</a> of a binary tree in linear time:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">=</span> <span class=\"kt\">Leaf</span> <span class=\"n\">a</span>  <span class=\"o\">|</span>  <span class=\"kt\">Branch</span> <span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"nf\">bftrav</span> <span class=\"ow\">::</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">]</span>\n<span class=\"nf\">bftrav</span> <span class=\"n\">tree</span> <span class=\"ow\">=</span> <span class=\"n\">queue</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">queue</span> <span class=\"ow\">=</span> <span class=\"n\">tree</span> <span class=\"kt\">:</span> <span class=\"n\">gen</span> <span class=\"mi\">1</span> <span class=\"n\">queue</span>\n\n    <span class=\"n\">gen</span>  <span class=\"mi\">0</span>   <span class=\"n\">p</span>                 <span class=\"ow\">=</span>         <span class=\"kt\">[]</span>           \n    <span class=\"n\">gen</span> <span class=\"n\">len</span> <span class=\"p\">(</span><span class=\"kt\">Leaf</span>   <span class=\"kr\">_</span>     <span class=\"kt\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span>         <span class=\"n\">gen</span> <span class=\"p\">(</span><span class=\"n\">len</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">s</span> \n    <span class=\"n\">gen</span> <span class=\"n\">len</span> <span class=\"p\">(</span><span class=\"kt\">Branch</span> <span class=\"kr\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"kt\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">l</span> <span class=\"kt\">:</span> <span class=\"n\">r</span> <span class=\"kt\">:</span> <span class=\"n\">gen</span> <span class=\"p\">(</span><span class=\"n\">len</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">s</span>\n</pre></div>\n<p>This definition takes an initial tree and produces a list of subtrees.   This list serves dual purpose as both the queue and the result (<small><i><code>gen len p</code></i></small> produces its output <small><i><code>len</code></i></small> notches after its input back-pointer, <small><i><code>p</code></i></small>, along the <small><i><code>queue</code></i></small>).  It is finite if and only if the initial tree is finite.  The length of the queue must be explicitly tracked in order to ensure termination;  this can safely be elided if this definition is applied only to infinite trees.  \n</p><p>Another particularly good example gives a solution to the problem of breadth-first labeling.<sup id=\"cite_ref-18\" class=\"reference\"><a href=\"#cite_note-18\">&#91;9&#93;</a></sup> The function <code>label</code> visits every node in a binary tree in a breadth first fashion,  and replaces each label with an integer,  each subsequent integer is bigger than the last by one.   This solution employs a self-referential data structure,  and the binary tree can be finite or infinite.\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"nf\">label</span> <span class=\"ow\">::</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Tree</span> <span class=\"kt\">Int</span> <span class=\"kt\">Int</span> \n<span class=\"nf\">label</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"n\">t</span><span class=\"err\">\u2032</span>\n    <span class=\"kr\">where</span>\n    <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"err\">\u2032</span><span class=\"p\">,</span> <span class=\"n\">ns</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"kt\">:</span><span class=\"n\">ns</span><span class=\"p\">)</span>\n\n    <span class=\"n\">go</span> <span class=\"ow\">::</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"n\">b</span>    <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>  <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"kt\">Int</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">])</span>\n    <span class=\"n\">go</span>   <span class=\"p\">(</span><span class=\"kt\">Leaf</span>   <span class=\"kr\">_</span>    <span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"kt\">:</span><span class=\"n\">ns</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Leaf</span>   <span class=\"n\">n</span>       <span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"kt\">:</span> <span class=\"n\">ns</span>  <span class=\"p\">)</span>\n    <span class=\"n\">go</span>   <span class=\"p\">(</span><span class=\"kt\">Branch</span> <span class=\"kr\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"kt\">:</span><span class=\"n\">ns</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Branch</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"err\">\u2032</span> <span class=\"n\">r</span><span class=\"err\">\u2032</span> <span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"kt\">:</span> <span class=\"n\">ns</span><span class=\"err\">\u2032\u2032</span><span class=\"p\">)</span>\n                                <span class=\"kr\">where</span>\n                                  <span class=\"p\">(</span><span class=\"n\">l</span><span class=\"err\">\u2032</span><span class=\"p\">,</span> <span class=\"n\">ns</span><span class=\"err\">\u2032</span> <span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">l</span> <span class=\"n\">ns</span>\n                                  <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"err\">\u2032</span><span class=\"p\">,</span> <span class=\"n\">ns</span><span class=\"err\">\u2032\u2032</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">r</span> <span class=\"n\">ns</span><span class=\"err\">\u2032</span>\n</pre></div>\n<p>An <a href=\"/wiki/Apomorphism\" title=\"Apomorphism\">apomorphism</a> (such as an <a href=\"/wiki/Anamorphism\" title=\"Anamorphism\">anamorphism</a>, such as <a href=\"/wiki/Unfold_(higher-order_function)\" class=\"mw-redirect\" title=\"Unfold (higher-order function)\">unfold</a>) is a form of corecursion in the same way that a <a href=\"/wiki/Paramorphism\" title=\"Paramorphism\">paramorphism</a> (such as a <a href=\"/wiki/Catamorphism\" title=\"Catamorphism\">catamorphism</a>, such as <a href=\"/wiki/Fold_(higher-order_function)\" title=\"Fold (higher-order function)\">fold</a>) is a form of recursion.\n</p><p>The <a href=\"/wiki/Coq\" title=\"Coq\">Coq</a> proof assistant supports corecursion and <a href=\"/wiki/Coinduction\" title=\"Coinduction\">coinduction</a> using the CoFixpoint command.\n</p>\n<h2><span class=\"mw-headline\" id=\"History\">History</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=7\" title=\"Edit section: History\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Corecursion, referred to as <i>circular programming,</i> dates at least to (<a href=\"#CITEREFBird1984\">Bird 1984</a>), who credits <a href=\"/wiki/John_Hughes_(computer_scientist)\" title=\"John Hughes (computer scientist)\">John Hughes</a> and <a href=\"/wiki/Philip_Wadler\" title=\"Philip Wadler\">Philip Wadler</a>; more general forms were developed in (<a href=\"#CITEREFAllison1989\">Allison 1989</a>). The original motivations included producing more efficient algorithms (allowing 1 pass over data in some cases, instead of requiring multiple passes) and implementing classical data structures, such as doubly linked lists and queues, in functional languages.\n</p>\n<h2><span class=\"mw-headline\" id=\"See_also\">See also</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=8\" title=\"Edit section: See also\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<ul><li><a href=\"/wiki/Bisimulation\" title=\"Bisimulation\">Bisimulation</a></li>\n<li><a href=\"/wiki/Coinduction\" title=\"Coinduction\">Coinduction</a></li>\n<li><a href=\"/wiki/Recursion\" title=\"Recursion\">Recursion</a></li>\n<li><a href=\"/wiki/Anamorphism\" title=\"Anamorphism\">Anamorphism</a></li></ul>\n<h2><span class=\"mw-headline\" id=\"Notes\">Notes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=9\" title=\"Edit section: Notes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div class=\"reflist\" style=\"list-style-type: lower-alpha;\">\n<div class=\"mw-references-wrap\"><ol class=\"references\">\n<li id=\"cite_note-1\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-1\">^</a></b></span> <span class=\"reference-text\">Not validating input data.</span>\n</li>\n<li id=\"cite_note-2\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-2\">^</a></b></span> <span class=\"reference-text\">More elegantly, one can start by placing the root node itself in the data structure and then starting the process.</span>\n</li>\n<li id=\"cite_note-3\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-3\">^</a></b></span> <span class=\"reference-text\">Post-order is to make \"leaf node is base case\" explicit for exposition, but the same analysis works for pre-order or in-order.</span>\n</li>\n<li id=\"cite_note-4\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-4\">^</a></b></span> <span class=\"reference-text\">Breadth-first traversal, unlike depth-first, is unambiguous, and visits a node value before processing children.</span>\n</li>\n<li id=\"cite_note-5\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-5\">^</a></b></span> <span class=\"reference-text\">Technically, one may define a breadth-first traversal on an ordered, disconnected set of trees \u2013 first the root node of each tree, then the children of each tree in turn, then the grandchildren in turn, etc.</span>\n</li>\n<li id=\"cite_note-6\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-6\">^</a></b></span> <span class=\"reference-text\">Assume fixed <a href=\"/wiki/Branching_factor\" title=\"Branching factor\">branching factor</a> (e.g., binary), or at least bounded, and balanced (infinite in every direction).</span>\n</li>\n<li id=\"cite_note-7\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-7\">^</a></b></span> <span class=\"reference-text\">First defining a tree class, say via:\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Tree</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">left</span>  <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n<p>and initializing a tree, say via:\n</p>\n<div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)),</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)))</span>\n</pre></div>\n<p>In this example nodes are labeled in breadth-first order:\n</p>\n<pre>    1\n 2     3\n4 5   6 7\n</pre>\n</span></li>\n<li id=\"cite_note-8\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-8\">^</a></b></span> <span class=\"reference-text\">Intuitively, the function iterates over subtrees (possibly empty), then once these are finished, all that is left is the node itself, whose value is then returned; this corresponds to treating a leaf node as basic.</span>\n</li>\n<li id=\"cite_note-9\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-9\">^</a></b></span> <span class=\"reference-text\">Here the argument (and loop variable) is considered as a whole, possible infinite tree, represented by (identified with) its root node (tree = root node), rather than as a potential leaf node, hence the choice of variable name.</span>\n</li>\n</ol></div></div>\n<h2><span class=\"mw-headline\" id=\"References\">References</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Corecursion&amp;action=edit&amp;section=10\" title=\"Edit section: References\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div class=\"reflist columns references-column-width\" style=\"-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;\">\n<ol class=\"references\">\n<li id=\"cite_note-10\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-10\">^</a></b></span> <span class=\"reference-text\">Barwise and Moss 1996.</span>\n</li>\n<li id=\"cite_note-11\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-11\">^</a></b></span> <span class=\"reference-text\">Moss and Danner 1997.</span>\n</li>\n<li id=\"cite_note-12\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-12\">^</a></b></span> <span class=\"reference-text\">Smyth and Plotkin 1982.</span>\n</li>\n<li id=\"cite_note-13\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-13\">^</a></b></span> <span class=\"reference-text\">Gibbons and Hutton 2005.</span>\n</li>\n<li id=\"cite_note-14\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-14\">^</a></b></span> <span class=\"reference-text\">Doets and van Eijck 2004.</span>\n</li>\n<li id=\"cite_note-15\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-15\">^</a></b></span> <span class=\"reference-text\">Leclerc and Paulin-Mohring, 1994</span>\n</li>\n<li id=\"cite_note-16\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-16\">^</a></b></span> <span class=\"reference-text\">Hettinger 2009.</span>\n</li>\n<li id=\"cite_note-17\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-17\">^</a></b></span> <span class=\"reference-text\">Allison 1989; Smith 2009.</span>\n</li>\n<li id=\"cite_note-18\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-18\">^</a></b></span> <span class=\"reference-text\">Jones and Gibbons 1992.</span>\n</li>\n</ol></div>\n<style data-mw-deduplicate=\"TemplateStyles:r853264625\">.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}</style><div class=\"refbegin\" style=\"\">\n<ul><li><cite class=\"citation journal\"><a href=\"/wiki/Richard_Bird_(computer_scientist)\" title=\"Richard Bird (computer scientist)\">Bird, Richard Simpson</a> (1984). \"Using circular programs to eliminate multiple traversals of data\". <i>Acta Informatica</i>. <b>21</b> (3): 239\u2013250. <a href=\"/wiki/Digital_object_identifier\" title=\"Digital object identifier\">doi</a>:<a rel=\"nofollow\" class=\"external text\" href=\"//doi.org/10.1007/BF00264249\">10.1007/BF00264249</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Acta+Informatica&amp;rft.atitle=Using+circular+programs+to+eliminate+multiple+traversals+of+data&amp;rft.volume=21&amp;rft.issue=3&amp;rft.pages=239-250&amp;rft.date=1984&amp;rft_id=info%3Adoi%2F10.1007%2FBF00264249&amp;rft.aulast=Bird&amp;rft.aufirst=Richard+Simpson&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation journal\">Lloyd Allison (April 1989). <a rel=\"nofollow\" class=\"external text\" href=\"http://www.csse.monash.edu.au/~lloyd/tildeFP/1989SPE/\">\"Circular Programs and Self-Referential Structures\"</a>. <i>Software Practice and Experience</i>. <b>19</b> (2): 99\u2013109. <a href=\"/wiki/Digital_object_identifier\" title=\"Digital object identifier\">doi</a>:<a rel=\"nofollow\" class=\"external text\" href=\"//doi.org/10.1002/spe.4380190202\">10.1002/spe.4380190202</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Software+Practice+and+Experience&amp;rft.atitle=Circular+Programs+and+Self-Referential+Structures&amp;rft.volume=19&amp;rft.issue=2&amp;rft.pages=99-109&amp;rft.date=1989-04&amp;rft_id=info%3Adoi%2F10.1002%2Fspe.4380190202&amp;rft.au=Lloyd+Allison&amp;rft_id=http%3A%2F%2Fwww.csse.monash.edu.au%2F~lloyd%2FtildeFP%2F1989SPE%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation techreport\">Geraint Jones and <a href=\"/wiki/Jeremy_Gibbons\" title=\"Jeremy Gibbons\">Jeremy Gibbons</a> (1992). <a rel=\"nofollow\" class=\"external text\" href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.32.5446\"><i>Linear-time breadth-first tree algorithms: An exercise in the arithmetic of folds and zips</i></a> (Technical report). Dept of Computer Science, University of Auckland.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=report&amp;rft.btitle=Linear-time+breadth-first+tree+algorithms%3A+An+exercise+in+the+arithmetic+of+folds+and+zips&amp;rft.pub=Dept+of+Computer+Science%2C+University+of+Auckland&amp;rft.date=1992&amp;rft.au=Geraint+Jones+and+Jeremy+Gibbons&amp;rft_id=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.32.5446&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation book\"><a href=\"/wiki/Jon_Barwise\" title=\"Jon Barwise\">Jon Barwise</a>; Lawrence S Moss (June 1996). <a rel=\"nofollow\" class=\"external text\" href=\"http://www.press.uchicago.edu/presssite/metadata.epl?mode=synopsis&amp;bookkey=3630257\"><i>Vicious Circles</i></a>. Center for the Study of Language and Information. <a href=\"/wiki/International_Standard_Book_Number\" title=\"International Standard Book Number\">ISBN</a>&#160;<a href=\"/wiki/Special:BookSources/978-1-57586-009-1\" title=\"Special:BookSources/978-1-57586-009-1\">978-1-57586-009-1</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Vicious+Circles&amp;rft.pub=Center+for+the+Study+of+Language+and+Information&amp;rft.date=1996-06&amp;rft.isbn=978-1-57586-009-1&amp;rft.au=Jon+Barwise&amp;rft.au=Lawrence+S+Moss&amp;rft_id=http%3A%2F%2Fwww.press.uchicago.edu%2Fpresssite%2Fmetadata.epl%3Fmode%3Dsynopsis%26bookkey%3D3630257&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation journal\">Lawrence S Moss; Norman Danner (1997). <a rel=\"nofollow\" class=\"external text\" href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.40.4243\">\"On the Foundations of Corecursion\"</a>. <i>Logic Journal of the IGPL</i>. <b>5</b> (2): 231\u2013257. <a href=\"/wiki/Digital_object_identifier\" title=\"Digital object identifier\">doi</a>:<a rel=\"nofollow\" class=\"external text\" href=\"//doi.org/10.1093/jigpal/5.2.231\">10.1093/jigpal/5.2.231</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Logic+Journal+of+the+IGPL&amp;rft.atitle=On+the+Foundations+of+Corecursion&amp;rft.volume=5&amp;rft.issue=2&amp;rft.pages=231-257&amp;rft.date=1997&amp;rft_id=info%3Adoi%2F10.1093%2Fjigpal%2F5.2.231&amp;rft.au=Lawrence+S+Moss&amp;rft.au=Norman+Danner&amp;rft_id=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.40.4243&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation book\">Kees Doets; Jan van Eijck (May 2004). <a rel=\"nofollow\" class=\"external text\" href=\"http://homepages.cwi.nl/~jve/HR/\"><i>The Haskell Road to Logic, Maths, and Programming</i></a>. King's College Publications. <a href=\"/wiki/International_Standard_Book_Number\" title=\"International Standard Book Number\">ISBN</a>&#160;<a href=\"/wiki/Special:BookSources/978-0-9543006-9-2\" title=\"Special:BookSources/978-0-9543006-9-2\">978-0-9543006-9-2</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Haskell+Road+to+Logic%2C+Maths%2C+and+Programming&amp;rft.pub=King%27s+College+Publications&amp;rft.date=2004-05&amp;rft.isbn=978-0-9543006-9-2&amp;rft.au=Kees+Doets&amp;rft.au=Jan+van+Eijck&amp;rft_id=http%3A%2F%2Fhomepages.cwi.nl%2F~jve%2FHR%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation journal\"><a href=\"/wiki/David_Turner_(computer_scientist)\" title=\"David Turner (computer scientist)\">David Turner</a> (2004-07-28). <a rel=\"nofollow\" class=\"external text\" href=\"http://www.jucs.org/jucs_10_7/total_functional_programming\">\"Total Functional Programming\"</a>. <i>Journal of Universal Computer Science</i>. <b>10</b> (7): 751\u2013768. <a href=\"/wiki/Digital_object_identifier\" title=\"Digital object identifier\">doi</a>:<a rel=\"nofollow\" class=\"external text\" href=\"//doi.org/10.3217/jucs-010-07-0751\">10.3217/jucs-010-07-0751</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Journal+of+Universal+Computer+Science&amp;rft.atitle=Total+Functional+Programming&amp;rft.volume=10&amp;rft.issue=7&amp;rft.pages=751-768&amp;rft.date=2004-07-28&amp;rft_id=info%3Adoi%2F10.3217%2Fjucs-010-07-0751&amp;rft.au=David+Turner&amp;rft_id=http%3A%2F%2Fwww.jucs.org%2Fjucs_10_7%2Ftotal_functional_programming&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation journal\">Jeremy Gibbons; Graham Hutton (April 2005). <a rel=\"nofollow\" class=\"external text\" href=\"http://www.cs.nott.ac.uk/~gmh/bib.html#corecursion\">\"Proof methods for corecursive programs\"</a>. <i>Fundamenta Informaticae Special Issue on Program Transformation</i>. <b>66</b> (4): 353\u2013366.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Fundamenta+Informaticae+Special+Issue+on+Program+Transformation&amp;rft.atitle=Proof+methods+for+corecursive+programs&amp;rft.volume=66&amp;rft.issue=4&amp;rft.pages=353-366&amp;rft.date=2005-04&amp;rft.au=Jeremy+Gibbons&amp;rft.au=Graham+Hutton&amp;rft_id=http%3A%2F%2Fwww.cs.nott.ac.uk%2F~gmh%2Fbib.html%23corecursion&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite id=\"CITEREFLeon_P_Smith2009\" class=\"citation\">Leon P Smith (2009-07-29), <a rel=\"nofollow\" class=\"external text\" href=\"http://themonadreader.wordpress.com/2009/07/29/issue-14/\">\"Lloyd Allison's Corecursive Queues:  Why Continuations Matter\"</a>, <i>The Monad Reader</i> (14): 37\u201368</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Monad+Reader&amp;rft.atitle=Lloyd+Allison%27s+Corecursive+Queues%3A++Why+Continuations+Matter&amp;rft.issue=14&amp;rft.pages=37-68&amp;rft.date=2009-07-29&amp;rft.au=Leon+P+Smith&amp;rft_id=http%3A%2F%2Fthemonadreader.wordpress.com%2F2009%2F07%2F29%2Fissue-14%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation web\">Raymond Hettinger (2009-11-19). <a rel=\"nofollow\" class=\"external text\" href=\"http://code.activestate.com/recipes/576961/\">\"Recipe 576961: Technique for cyclical iteration\"</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Recipe+576961%3A+Technique+for+cyclical+iteration&amp;rft.date=2009-11-19&amp;rft.au=Raymond+Hettinger&amp;rft_id=http%3A%2F%2Fcode.activestate.com%2Frecipes%2F576961%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation journal\">M. B. Smyth and <a href=\"/wiki/Gordon_Plotkin\" title=\"Gordon Plotkin\">G. D. Plotkin</a> (1982). \"The Category-Theoretic Solution of Recursive Domain Equations\". <i><a href=\"/wiki/SIAM_Journal_on_Computing\" title=\"SIAM Journal on Computing\">SIAM Journal on Computing</a></i>. <b>11</b> (4): 761\u2013783. <a href=\"/wiki/Digital_object_identifier\" title=\"Digital object identifier\">doi</a>:<a rel=\"nofollow\" class=\"external text\" href=\"//doi.org/10.1137/0211062\">10.1137/0211062</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=SIAM+Journal+on+Computing&amp;rft.atitle=The+Category-Theoretic+Solution+of+Recursive+Domain+Equations&amp;rft.volume=11&amp;rft.issue=4&amp;rft.pages=761-783&amp;rft.date=1982&amp;rft_id=info%3Adoi%2F10.1137%2F0211062&amp;rft.au=M.+B.+Smyth+and+G.+D.+Plotkin&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><cite class=\"citation book\">Leclerc, Francois; Paulin-Mohring, Christine (1993). <a rel=\"nofollow\" class=\"external text\" href=\"http://dl.acm.org/citation.cfm?id=189973.189981\"><i>Programming with Streams in Coq: A Case Study: the Sieve of Eratosthenes</i></a>. Types for Proofs and Programs: International Workshop TYPES '93. Springer-Verlag New York, Inc. pp.&#160;191\u2013212. <a href=\"/wiki/International_Standard_Book_Number\" title=\"International Standard Book Number\">ISBN</a>&#160;<a href=\"/wiki/Special:BookSources/3-540-58085-9\" title=\"Special:BookSources/3-540-58085-9\">3-540-58085-9</a>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Programming+with+Streams+in+Coq%3A+A+Case+Study%3A+the+Sieve+of+Eratosthenes&amp;rft.series=Types+for+Proofs+and+Programs%3A+International+Workshop+TYPES+%2793.&amp;rft.pages=191-212&amp;rft.pub=Springer-Verlag+New+York%2C+Inc.&amp;rft.date=1993&amp;rft.isbn=3-540-58085-9&amp;rft.au=Leclerc%2C+Francois&amp;rft.au=Paulin-Mohring%2C+Christine&amp;rft_id=http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D189973.189981&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ACorecursion\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li></ul>\n</div>\n\n<!-- \nNewPP limit report\nParsed by mw1293\nCached time: 20180904082812\nCache expiry: 1900800\nDynamic content: false\nCPU time usage: 0.384 seconds\nReal time usage: 0.562 seconds\nPreprocessor visited node count: 1622/1000000\nPreprocessor generated node count: 0/1500000\nPost\u2010expand include size: 39353/2097152 bytes\nTemplate argument size: 3329/2097152 bytes\nHighest expansion depth: 15/40\nExpensive parser function count: 7/500\nUnstrip recursion depth: 1/20\nUnstrip post\u2010expand size: 32805/5000000 bytes\nNumber of Wikibase entities loaded: 0/400\nLua time usage: 0.135/10.000 seconds\nLua memory usage: 4.22 MB/50 MB\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%  355.478      1 -total\n 21.91%   77.878      6 Template:Cite_journal\n 13.93%   49.519      3 Template:Ambox\n 13.26%   47.142      1 Template:Technical\n 10.69%   38.017      1 Template:Cleanup\n 10.25%   36.430      1 Template:Distinguish\n  8.03%   28.556      2 Template:Category_handler\n  5.35%   19.035      2 Template:Reflist\n  4.83%   17.164      1 Template:Refbegin\n  4.59%   16.327      3 Template:Cite_book\n-->\n\n<!-- Saved in parser cache with key enwiki:pcache:idhash:1338683-0!canonical!math=5 and timestamp 20180904082812 and revision id 837785206\n -->\n</div>"},"langlinks":[{"lang":"nl","url":"https://nl.wikipedia.org/wiki/Corecursie","langname":"Dutch","autonym":"Nederlands","*":"Corecursie"},{"lang":"ru","url":"https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F","langname":"Russian","autonym":"\u0440\u0443\u0441\u0441\u043a\u0438\u0439","*":"\u041a\u043e\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f"},{"lang":"uk","url":"https://uk.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D1%96%D1%8F","langname":"Ukrainian","autonym":"\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430","*":"\u041a\u043e\u0440\u0435\u043a\u0443\u0440\u0441\u0456\u044f"},{"lang":"zh","url":"https://zh.wikipedia.org/wiki/%E5%85%B1%E9%80%92%E5%BD%92","langname":"Chinese","autonym":"\u4e2d\u6587","*":"\u5171\u9012\u5f52"}],"categories":[{"sortkey":"","hidden":"","*":"Wikipedia_articles_that_are_too_technical_from_November_2010"},{"sortkey":"","hidden":"","*":"All_articles_that_are_too_technical"},{"sortkey":"","hidden":"","*":"Articles_needing_expert_attention_from_November_2010"},{"sortkey":"","hidden":"","*":"All_articles_needing_expert_attention"},{"sortkey":"","hidden":"","*":"Articles_needing_cleanup_from_July_2012"},{"sortkey":"","hidden":"","*":"All_pages_needing_cleanup"},{"sortkey":"","hidden":"","*":"Cleanup_tagged_articles_with_a_reason_field_from_July_2012"},{"sortkey":"","hidden":"","*":"Wikipedia_pages_needing_cleanup_from_July_2012"},{"sortkey":"","hidden":"","*":"Articles_needing_expert_attention_with_no_reason_or_talk_parameter"},{"sortkey":"","hidden":"","*":"Computer_science_articles_needing_expert_attention"},{"sortkey":"","*":"Theoretical_computer_science"},{"sortkey":"","*":"Self-reference"},{"sortkey":"","hidden":"","*":"Articles_with_example_Haskell_code"},{"sortkey":"","hidden":"","*":"Articles_with_example_Python_code"},{"sortkey":"","*":"Functional_programming"},{"sortkey":"","*":"Category_theory"},{"sortkey":"","*":"Recursion"}],"links":[{"ns":14,"exists":"","*":"Category:Wikipedia articles that are too technical from November 2010"},{"ns":14,"exists":"","*":"Category:Articles needing expert attention from November 2010"},{"ns":14,"exists":"","*":"Category:Articles needing cleanup from July 2012"},{"ns":14,"exists":"","*":"Category:Cleanup tagged articles with a reason field from July 2012"},{"ns":14,"*":"Category:Wikipedia categories needing cleanup from July 2012"},{"ns":14,"exists":"","*":"Category:Wikipedia pages needing cleanup from July 2012"},{"ns":14,"exists":"","*":"Category:Computer science articles needing expert attention"},{"ns":0,"exists":"","*":"Anamorphism"},{"ns":0,"exists":"","*":"Apomorphism"},{"ns":0,"exists":"","*":"Assignment (computer science)"},{"ns":0,"exists":"","*":"Bisimulation"},{"ns":0,"exists":"","*":"Branching factor"},{"ns":0,"exists":"","*":"Breadth-first"},{"ns":0,"exists":"","*":"Breadth-first search"},{"ns":0,"exists":"","*":"Call stack"},{"ns":0,"exists":"","*":"Catamorphism"},{"ns":0,"exists":"","*":"Category of sets"},{"ns":0,"exists":"","*":"Codata (computer science)"},{"ns":0,"exists":"","*":"Coinduction"},{"ns":0,"exists":"","*":"Complete partial order"},{"ns":0,"exists":"","*":"Computer science"},{"ns":0,"exists":"","*":"Coq"},{"ns":0,"exists":"","*":"Data structure"},{"ns":0,"exists":"","*":"David Turner (computer scientist)"},{"ns":0,"exists":"","*":"Denotational semantics"},{"ns":0,"exists":"","*":"Depth-first"},{"ns":0,"exists":"","*":"Digital object identifier"},{"ns":0,"exists":"","*":"Dual (category theory)"},{"ns":0,"exists":"","*":"F-algebra"},{"ns":0,"exists":"","*":"F-coalgebra"},{"ns":0,"exists":"","*":"Fibonacci numbers"},{"ns":0,"exists":"","*":"Fibonacci sequence"},{"ns":0,"exists":"","*":"Finite set"},{"ns":0,"exists":"","*":"Fold (higher-order function)"},{"ns":0,"exists":"","*":"Functional programming"},{"ns":0,"exists":"","*":"Generative recursion"},{"ns":0,"exists":"","*":"Generator (computer programming)"},{"ns":0,"exists":"","*":"Gordon Plotkin"},{"ns":0,"exists":"","*":"Greatest fixpoint"},{"ns":0,"exists":"","*":"Haskell (programming language)"},{"ns":0,"exists":"","*":"Infinite set"},{"ns":0,"exists":"","*":"Initial algebra"},{"ns":0,"exists":"","*":"Initial and terminal objects"},{"ns":0,"exists":"","*":"International Standard Book Number"},{"ns":0,"exists":"","*":"Isomorphism"},{"ns":0,"exists":"","*":"Iteration"},{"ns":0,"exists":"","*":"Jeremy Gibbons"},{"ns":0,"exists":"","*":"John Hughes (computer scientist)"},{"ns":0,"exists":"","*":"Jon Barwise"},{"ns":0,"exists":"","*":"Lazy evaluation"},{"ns":0,"exists":"","*":"Least fixpoint"},{"ns":0,"exists":"","*":"Mutual recursion"},{"ns":0,"exists":"","*":"Non-well-founded set theory"},{"ns":0,"exists":"","*":"Parallel assignment"},{"ns":0,"exists":"","*":"Paramorphism"},{"ns":0,"exists":"","*":"Pattern-matching"},{"ns":0,"exists":"","*":"Philip Wadler"},{"ns":0,"exists":"","*":"Primitive recursion"},{"ns":0,"exists":"","*":"Queue (abstract data type)"},{"ns":0,"exists":"","*":"Recurrence relation"},{"ns":0,"exists":"","*":"Recursion"},{"ns":0,"exists":"","*":"Recursion (computer science)"},{"ns":0,"exists":"","*":"Richard Bird (computer scientist)"},{"ns":0,"exists":"","*":"SIAM Journal on Computing"},{"ns":0,"exists":"","*":"Scott continuity"},{"ns":0,"exists":"","*":"Self-reference"},{"ns":0,"exists":"","*":"Stack (abstract data type)"},{"ns":0,"exists":"","*":"Stream (computing)"},{"ns":0,"exists":"","*":"Tail call"},{"ns":0,"exists":"","*":"Total language"},{"ns":0,"exists":"","*":"Tree traversal"},{"ns":0,"exists":"","*":"Unfold (higher-order function)"},{"ns":0,"exists":"","*":"Up to isomorphism"},{"ns":4,"exists":"","*":"Wikipedia:Cleanup"},{"ns":4,"exists":"","*":"Wikipedia:Make technical articles understandable"},{"ns":4,"exists":"","*":"Wikipedia:Manual of Style"},{"ns":4,"exists":"","*":"Wikipedia:WikiProject Computer science"},{"ns":12,"exists":"","*":"Help:Maintenance template removal"}],"templates":[{"ns":10,"exists":"","*":"Template:Distinguish"},{"ns":10,"exists":"","*":"Template:Nobreak"},{"ns":10,"exists":"","*":"Template:Nowrap"},{"ns":10,"exists":"","*":"Template:Efn"},{"ns":10,"exists":"","*":"Template:Technical"},{"ns":10,"exists":"","*":"Template:Ambox"},{"ns":10,"exists":"","*":"Template:Cleanup"},{"ns":10,"exists":"","*":"Template:Main other"},{"ns":10,"exists":"","*":"Template:Category handler"},{"ns":10,"exists":"","*":"Template:DMC"},{"ns":10,"exists":"","*":"Template:Dated maintenance category"},{"ns":10,"exists":"","*":"Template:FULLROOTPAGENAME"},{"ns":10,"exists":"","*":"Template:Ns has subpages"},{"ns":10,"exists":"","*":"Template:DMCA"},{"ns":10,"exists":"","*":"Template:Expert needed"},{"ns":10,"exists":"","*":"Template:Expert needed/catcheck"},{"ns":10,"exists":"","*":"Template:Anchor"},{"ns":10,"exists":"","*":"Template:Harv"},{"ns":10,"exists":"","*":"Template:Harvard citation"},{"ns":10,"exists":"","*":"Template:Notelist"},{"ns":10,"exists":"","*":"Template:Reflist"},{"ns":10,"exists":"","*":"Template:Column-width"},{"ns":10,"exists":"","*":"Template:Refbegin"},{"ns":10,"exists":"","*":"Template:Refbegin/styles.css"},{"ns":10,"exists":"","*":"Template:Cite journal"},{"ns":10,"exists":"","*":"Template:Cite techreport"},{"ns":10,"exists":"","*":"Template:Cite book"},{"ns":10,"exists":"","*":"Template:Citation"},{"ns":10,"exists":"","*":"Template:Cite web"},{"ns":10,"exists":"","*":"Template:Refend"},{"ns":828,"exists":"","*":"Module:Distinguish"},{"ns":828,"exists":"","*":"Module:Hatnote"},{"ns":828,"exists":"","*":"Module:Hatnote list"},{"ns":828,"exists":"","*":"Module:Arguments"},{"ns":828,"exists":"","*":"Module:TableTools"},{"ns":828,"exists":"","*":"Module:Unsubst"},{"ns":828,"exists":"","*":"Module:Message box"},{"ns":828,"exists":"","*":"Module:No globals"},{"ns":828,"exists":"","*":"Module:Yesno"},{"ns":828,"exists":"","*":"Module:Message box/configuration"},{"ns":828,"exists":"","*":"Module:Category handler"},{"ns":828,"exists":"","*":"Module:Category handler/data"},{"ns":828,"exists":"","*":"Module:Category handler/config"},{"ns":828,"exists":"","*":"Module:Category handler/shared"},{"ns":828,"exists":"","*":"Module:Category handler/blacklist"},{"ns":828,"exists":"","*":"Module:Namespace detect/data"},{"ns":828,"exists":"","*":"Module:Namespace detect/config"},{"ns":828,"exists":"","*":"Module:Ns has subpages"},{"ns":828,"exists":"","*":"Module:Anchor"},{"ns":828,"exists":"","*":"Module:Footnotes"},{"ns":828,"exists":"","*":"Module:Check for unknown parameters"},{"ns":828,"exists":"","*":"Module:Citation/CS1"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Configuration"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Whitelist"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Utilities"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Date validation"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Identifiers"},{"ns":828,"exists":"","*":"Module:Citation/CS1/COinS"}],"images":["Edit-clear.svg","Ambox_important.svg"],"externallinks":["//doi.org/10.1007/BF00264249","http://www.csse.monash.edu.au/~lloyd/tildeFP/1989SPE/","//doi.org/10.1002/spe.4380190202","http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.32.5446","http://www.press.uchicago.edu/presssite/metadata.epl?mode=synopsis&bookkey=3630257","http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.40.4243","//doi.org/10.1093/jigpal/5.2.231","http://homepages.cwi.nl/~jve/HR/","http://www.jucs.org/jucs_10_7/total_functional_programming","//doi.org/10.3217/jucs-010-07-0751","http://www.cs.nott.ac.uk/~gmh/bib.html#corecursion","http://themonadreader.wordpress.com/2009/07/29/issue-14/","http://code.activestate.com/recipes/576961/","//doi.org/10.1137/0211062","http://dl.acm.org/citation.cfm?id=189973.189981"],"sections":[{"toclevel":1,"level":"2","line":"Examples","number":"1","index":"1","fromtitle":"Corecursion","byteoffset":2375,"anchor":"Examples"},{"toclevel":2,"level":"3","line":"Factorial","number":"1.1","index":"2","fromtitle":"Corecursion","byteoffset":3316,"anchor":"Factorial"},{"toclevel":2,"level":"3","line":"Fibonacci sequence","number":"1.2","index":"3","fromtitle":"Corecursion","byteoffset":7743,"anchor":"Fibonacci_sequence"},{"toclevel":2,"level":"3","line":"Tree traversal","number":"1.3","index":"4","fromtitle":"Corecursion","byteoffset":8455,"anchor":"Tree_traversal"},{"toclevel":1,"level":"2","line":"Definition","number":"2","index":"5","fromtitle":"Corecursion","byteoffset":15185,"anchor":"Definition"},{"toclevel":1,"level":"2","line":"Discussion","number":"3","index":"6","fromtitle":"Corecursion","byteoffset":17067,"anchor":"Discussion"},{"toclevel":1,"level":"2","line":"History","number":"4","index":"7","fromtitle":"Corecursion","byteoffset":23978,"anchor":"History"},{"toclevel":1,"level":"2","line":"See also","number":"5","index":"8","fromtitle":"Corecursion","byteoffset":24488,"anchor":"See_also"},{"toclevel":1,"level":"2","line":"Notes","number":"6","index":"9","fromtitle":"Corecursion","byteoffset":24575,"anchor":"Notes"},{"toclevel":1,"level":"2","line":"References","number":"7","index":"10","fromtitle":"Corecursion","byteoffset":24601,"anchor":"References"}],"parsewarnings":[],"displaytitle":"Corecursion","iwlinks":[],"properties":[{"name":"wikibase_item","*":"Q2524691"}]}}