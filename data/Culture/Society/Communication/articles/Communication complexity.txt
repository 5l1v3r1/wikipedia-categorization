In theoretical computer science, communication complexity studies the amount of communication required to solve a problem when the input to the problem is distributed among two or more parties. It was introduced by Andrew Yao in 1979,  who investigated the following problem involving two separated parties, traditionally called Alice and Bob. Alice receives an n-bit string x and Bob another n-bit string y, and the goal is for one of them (say Bob) to compute a certain function f(x,y) with the least amount of communication between them. Of course they can always succeed by having Alice send her whole n-bit string to Bob, who then computes the function f, but the idea here is to find clever ways of calculating f with fewer than n bits of communication. Note that in communication complexity, we are not concerned with the amount of computation performed by Alice or Bob, or the size of the memory used. This abstract problem with two parties (called two-party communication complexity), and its general form with more than two parties, is relevant in many contexts: in VLSI circuit design, for example, one wants to minimize energy used by decreasing the amount of electric signals required between the different components during a distributed computation. The problem is also relevant in the study of data structures, and in the optimization of computer networks. For a survey of the field, see the textbook by Kushilevitz & Nisan (2006). Let                         f         :         X         ×         Y         →         Z                 {\displaystyle f:X\times Y\rightarrow Z}     where we assume in the typical case that                         X         =         Y         =         {         0         ,         1                    }                        n                                     {\displaystyle X=Y=\{0,1\}^{n}}     and                         Z         =         {         0         ,         1         }                 {\displaystyle Z=\{0,1\}}    . Alice draws an n-bit string                          x         ∈         X                 {\displaystyle x\in X}     while Bob draws an n-bit string                          y         ∈         Y                 {\displaystyle y\in Y}    . By communicating to each other one bit at a time (adopting some communication protocol), Alice and Bob want to compute the value of                         f         (         x         ,         y         )                 {\displaystyle f(x,y)}     such that at least one party knows the value at the end of the communication. At this point the answer can be communicated back so that at the cost of one extra bit, both parties will know the answer. The worst case communication complexity of this communication problem of computing                         f                 {\displaystyle f}    , denoted as                         D         (         f         )                 {\displaystyle D(f)}    , is then defined to be Using the above definition, it is useful to think of the function f as a matrix A (called the input matrix) where each row of the matrix corresponds to                         x         ∈         X                 {\displaystyle x\in X}     and each column corresponds to                         y         ∈         Y                 {\displaystyle y\in Y}    . An entry in the input matrix is                                    A                                       x               ,               y                                          =         f         (         x         ,         y         )                 {\displaystyle A_{\mathrm {x,y} }=f(x,y)}    . Initially both Alice and Bob have a copy of the entire matrix A (assuming the function f is known to both). Then, the problem of computing the function value can be rephrased as "zeroing-in" on the corresponding matrix entry. This problem can be solved if either Alice or Bob knows both x and y. At the start of communication, the number of choices for the value of the function on the inputs is the size of matrix, i.e.                                    2                        2             n                                     {\displaystyle 2^{2n}}    . Then, as and when each party communicates a bit to the other, the number of choices for the answer reduces as this eliminates a set of rows/columns resulting in a submatrix of A. More formally, a set                         R         ⊆         X         ×         Y                 {\displaystyle R\subseteq X\times Y}     is called a (combinatorial) rectangle if whenever                         (                    x                        1                             ,                    y                        1                             )         ∈         R                 {\displaystyle (x_{1},y_{1})\in R}     and                         (                    x                        2                             ,                    y                        2                             )         ∈         R                 {\displaystyle (x_{2},y_{2})\in R}     then                         (                    x                        1                             ,                    y                        2                             )         ∈         R                 {\displaystyle (x_{1},y_{2})\in R}    . Equivalently, R can also be viewed as a submatrix of the input matrix A such that                         R         =         M         ×         N                 {\displaystyle R=M\times N}     where                         M         ⊆         X                 {\displaystyle M\subseteq X}     and                         N         ⊆         Y                 {\displaystyle N\subseteq Y}    . Consider the case when k bits are already exchanged between the parties. Now, for a particular                         h         ∈         {         0         ,         1                    }                        k                                     {\displaystyle h\in \{0,1\}^{k}}    , let us define a matrix Then,                                    T                                       h                                          ⊆         X         ×         Y                 {\displaystyle T_{\mathrm {h} }\subseteq X\times Y}    , and                                    T                                       h                                                  {\displaystyle T_{\mathrm {h} }}     is a rectangle and a submatrix of A. We consider the case where Alice and Bob try to determine if they both have the same string.  That is, we are trying to determine if x is equal to y.  It is easy to prove that the equality problem (EQ) will always require you to communicate n bits in the worst case if you want to be absolutely sure x and y are equal. Consider the simple case of x and y being 3 bits.  The equality function in this case can be represented by the matrix below.  The rows representing all the possibilities of x, the columns those of y. As you can see, the function only evaluates to 1 when x equals y (i.e., on the diagonal).  It is also fairly easy to see how communicating a single bit divides your possibilities in half.  If you know that the first bit of y is 1, you only need to consider half of the columns (where y can equal 100, 101, 110, or 111). Proof. Assume that                         D         (         E         Q         )         ≤         n         −         1                 {\displaystyle D(EQ)\leq n-1}    .  This means that there exists an                         (         x         ,         x         )                 {\displaystyle (x,x)}     and an                         (                    x           ′                  ,                    x           ′                  )                 {\displaystyle (x',x')}     having the same history, h.  Since this history defines a rectangle,                         f         (         x         ,                    x           ′                  )                 {\displaystyle f(x,x')}     must also be 1.  By definition                         x         ≠                    x           ′                          {\displaystyle x\neq x'}     and we know that equality is only true for                         (         a         ,         b         )                 {\displaystyle (a,b)}     when                         a         =         b                 {\displaystyle a=b}    .  Thus, we have a contradiction. Intuitively, for                         D         (         E         Q         )                 {\displaystyle D(EQ)}     less than n, we need to be able to define a rectangle in the EQ matrix greater in size than a single cell.  All of the cells in this rectangle must contain 1 for us to be able to generalize that this rectangle equals 1.  It is not possible to form such a rectangle in the equality matrix. In the above definition, we are concerned with the number of bits that must be deterministically transmitted between two parties. If both the parties are given access to a random number generator, can they determine the value of                         f                 {\displaystyle f}     with much less information exchanged? Yao, in his seminal paper  answers this question by defining randomized communication complexity. A randomized protocol                         R                 {\displaystyle R}     for a function                         f                 {\displaystyle f}     has two-sided error. A randomized protocol is a deterministic protocol that uses an extra random string in addition to its normal input. There are two models for this: a public string is a random string that is known by both parties beforehand, while a private string is generated by one party and must be communicated to the other party. A theorem presented below shows that any public string protocol can be simulated by a private string protocol that uses O(log n) additional bits compared to the original. Note that in the probability inequalities above, the outcome of the protocol is understood to depend only on the random string; both strings x and y remain fixed. In other words, if R(x,y) yields g(x,y,r) when using random string r, then g(x,y,r) = f(x,y) for at least half of all choices for the string r. The randomized complexity is simply defined as the number of bits exchanged in such a protocol. Note that it is also possible to define a randomized protocol with one-sided error, and the complexity is defined similarly. Returning to the previous example of EQ, if certainty is not required, Alice and Bob can check for equality using only                         O         (         log         ⁡         n         )                 {\displaystyle O(\log n)}     messages.  Consider the following protocol:  Assume that Alice and Bob both have access to the same random string                         z         ∈         {         0         ,         1                    }                        n                                     {\displaystyle z\in \{0,1\}^{n}}    . Alice computes                         z         ⋅         x                 {\displaystyle z\cdot x}     and sends this bit (call it b) to Bob. (The                         (         ⋅         )                 {\displaystyle (\cdot )}     is the dot product in GF(2).) Then Bob compares b to                         z         ⋅         y                 {\displaystyle z\cdot y}    . If they are the same, then Bob accepts, saying x equals y. Otherwise, he rejects. Clearly, if                         x         =         y                 {\displaystyle x=y}    , then                         z         ⋅         x         =         z         ⋅         y                 {\displaystyle z\cdot x=z\cdot y}    , so                         P         r         o                    b                        z                             [         A         c         c         e         p         t         ]         =         1                 {\displaystyle Prob_{z}[Accept]=1}    . If x does not equal y, it is still possible that                         z         ⋅         x         =         z         ⋅         y                 {\displaystyle z\cdot x=z\cdot y}    , which would give Bob the wrong answer. How does this happen? If x and y are not equal, they must differ in some locations: Where x and y agree,                                    z                        i                             ∗                    x                        i                             =                    z                        i                             ∗                    c                        i                             =                    z                        i                             ∗                    y                        i                                     {\displaystyle z_{i}*x_{i}=z_{i}*c_{i}=z_{i}*y_{i}}     so those terms affect the dot products equally. We can safely ignore those terms and look only at where x and y differ. Furthermore, we can swap the bits                                    x                        i                                     {\displaystyle x_{i}}     and                                    y                        i                                     {\displaystyle y_{i}}     without changing whether or not the dot products are equal. This means we can swap bits so that x contains only zeros and y contains only ones: Note that                                    z           ′                  ⋅                    x           ′                  =         0                 {\displaystyle z'\cdot x'=0}     and                                    z           ′                  ⋅                    y           ′                  =                    Σ                        i                                        z                        i                      ′                          {\displaystyle z'\cdot y'=\Sigma _{i}z'_{i}}    . Now, the question becomes: for some random string                                    z           ′                          {\displaystyle z'}    , what is the probability that                                    Σ                        i                                        z                        i                      ′                  =         0                 {\displaystyle \Sigma _{i}z'_{i}=0}    ?  Since each                                    z                        i                      ′                          {\displaystyle z'_{i}}     is equally likely to be 5000000000000000000♠0 or 7000100000000000000♠1, this probability is just                         1                    /                  2                 {\displaystyle 1/2}    . Thus, when x does not equal y,                         P         r         o                    b                        z                             [         A         c         c         e         p         t         ]         =         1                    /                  2                 {\displaystyle Prob_{z}[Accept]=1/2}    . The algorithm can be repeated many times to increase its accuracy. This fits the requirements for a randomized communication algorithm. This shows that if Alice and Bob share a random string of length n, they can send one bit to each other to compute                         E         Q         (         x         ,         y         )                 {\displaystyle EQ(x,y)}    . In the next section, it is shown that Alice and Bob can exchange only                         O         (         log         ⁡         n         )                 {\displaystyle O(\log n)}     bits that are as good as sharing a random string of length n. Once that is shown, it follows that EQ can be computed in                         O         (         log         ⁡         n         )                 {\displaystyle O(\log n)}     messages. It is easier to create random protocols when both parties have access to the same random string (shared string protocol). It is still possible to use these protocols even when the two parties don't share a random string (private string protocol) with a small communication cost.  Any shared string random protocol using any number of random string can be simulated by a private string protocol that uses an extra O(log n) bits. Intuitively, we can find some set of strings that has enough randomness in it to run the random protocol with only a small increase in error.  This set can be shared beforehand, and instead of drawing a random string, Alice and Bob need only agree on which string to choose from the shared set. This set is small enough that the choice can be communicated efficiently. A formal proof follows. Consider some random protocol P with a maximum error rate of 0.1. Let                         R                 {\displaystyle R}     be                         100         n                 {\displaystyle 100n}     strings of length n, numbered                                    r                        1                             ,                    r                        2                             ,         …         ,                    r                        100             n                                     {\displaystyle r_{1},r_{2},\dots ,r_{100n}}    . Given such an                         R                 {\displaystyle R}    , define a new protocol                                    P                        R                      ′                          {\displaystyle P'_{R}}     which randomly picks some                                    r                        i                                     {\displaystyle r_{i}}     and then runs P using                                    r                        i                                     {\displaystyle r_{i}}     as the shared random string. It takes O(log 100n) = O(log n) bits to communicate the choice of                                    r                        i                                     {\displaystyle r_{i}}    . Let us define                         p         (         x         ,         y         )                 {\displaystyle p(x,y)}     and                                    p                        R                      ′                  (         x         ,         y         )                 {\displaystyle p'_{R}(x,y)}     to be the probabilities that                         P                 {\displaystyle P}     and                                    P                        R                      ′                          {\displaystyle P'_{R}}      compute the correct value for the input                         (         x         ,         y         )                 {\displaystyle (x,y)}    . For a fixed                         (         x         ,         y         )                 {\displaystyle (x,y)}    , we can use Hoeffding's inequality to get the following equation: Thus when we don't have                         (         x         ,         y         )                 {\displaystyle (x,y)}     fixed: The last equality above holds because there are                                    2                        2             n                                     {\displaystyle 2^{2n}}     different pairs                         (         x         ,         y         )                 {\displaystyle (x,y)}    . Since the probability does not equal 1, there is some                                    R                        0                                     {\displaystyle R_{0}}     so that for all                         (         x         ,         y         )                 {\displaystyle (x,y)}    : Since                         P                 {\displaystyle P}     has at most 0.1 error probability,                                    P                                       R                                0                                                  ′                          {\displaystyle P'_{R_{0}}}     can have at most 0.2 error probability. Quantum communication complexity tries to quantify the communication reduction possible by using quantum effects during a distributed computation. At least three quantum generalizations of communication complexity have been proposed; for a survey see the suggested text by G. Brassard. The first one is the qubit-communication model, where the parties can use quantum communication instead of classical communication, for example by exchanging photons through an optical fiber. In a second model the communication is still performed with classical bits, but the parties are allowed to manipulate an unlimited supply of quantum entangled states as part of their protocols. By doing measurements on their entangled states, the parties can save on classical communication during a distributed computation. The third model involves access to previously shared entanglement in addition to qubit communication, and is the least explored of the three quantum models. In nondeterministic communication complexity, Alice and Bob have access to an oracle.  After receiving the oracle's word, the parties communicate to deduce f(x,y).  The nondeterministic communication complexity is then the maximum over all pairs (x,y) over the sum of number of bits exchanged and the coding length of the oracle word. Viewed differently, this amounts to covering all 1-entries of the 0/1-matrix by combinatorial 1-rectangles (i.e., non-contiguous, non-convex submatrices, whose entries are all one (see Kushilevitz and Nisan or Dietzfelbinger et al.)).  The nondeterministic communication complexity is the binary logarithm of the rectangle covering number of the matrix: the minimum number of combinatorial 1-rectangles required to cover all 1-entries of the matrix, without covering any 0-entries. Nondeterministic communication complexity occurs as a means to obtaining lower bounds for deterministic communication complexity (see Dietzfelbinger et al.), but also in the theory of nonnegative matrices, where it gives a lower bound on the nonnegative rank of a nonnegative matrix.  Considering a 0/1 input matrix                                    M                        f                             =         [         f         (         x         ,         y         )                    ]                        x             ,             y             ∈             {             0             ,             1                            }                                n                                                                 {\displaystyle M_{f}=[f(x,y)]_{x,y\in \{0,1\}^{n}}}    , the minimum number of bits exchanged to compute                         f                 {\displaystyle f}     deterministically in the worst case,                         D         (         f         )                 {\displaystyle D(f)}    , is known to be bounded from below by the logarithm of the rank of the matrix                                    M                        f                                     {\displaystyle M_{f}}    . The log rank conjecture proposes that the communication complexity,                         D         (         f         )                 {\displaystyle D(f)}    , is bounded from above by a constant power of the logarithm of the rank of                                    M                        f                                     {\displaystyle M_{f}}    . Since D(f) is bounded from above and below by polynomials of log rank                        (                    M                        f                             )                 {\displaystyle (M_{f})}    , we can say D(f) is polynomially related to log rank                        (                    M                        f                             )                 {\displaystyle (M_{f})}    . Since the rank of a matrix is polynomial time computable in the size of the matrix, such an upper bound would allow the matrix's communication complexity to be approximated in polynomial time. Note, however, that the size of the matrix itself is exponential in the size of the input. For a randomized protocol, the number of bits exchanged in the worst case, R(f), is conjectured to be polynomially related to the following formula: Such log rank conjectures are valuable because they reduce the question of a matrix's communication complexity to a question of linearly independent rows (columns) of the matrix. This reveals that the essence of the communication complexity problem, for example in the EQ case above, is figuring out where in the matrix the inputs are, in order to find out if they're equivalent. Lower bounds in communication complexity can be used to prove lower bounds in decision tree complexity, VLSI circuits, data structures, streaming algorithms, space–time tradeoffs for Turing machines and more. 