{"parse":{"title":"Brooks's law","pageid":229070,"revid":852548073,"text":{"*":"<div class=\"mw-parser-output\"><p><b>Brooks' law</b> is an observation about <a href=\"/wiki/Software_project_management\" title=\"Software project management\">software project management</a> according to which \"adding <a href=\"/wiki/Human_resources\" title=\"Human resources\">human resources</a> to a late software project makes it later\".<sup id=\"cite_ref-BROOKS_1-0\" class=\"reference\"><a href=\"#cite_note-BROOKS-1\">&#91;1&#93;</a></sup><sup id=\"cite_ref-2\" class=\"reference\"><a href=\"#cite_note-2\">&#91;2&#93;</a></sup> It was coined by <a href=\"/wiki/Fred_Brooks\" title=\"Fred Brooks\">Fred Brooks</a> in his 1975 book <i><a href=\"/wiki/The_Mythical_Man-Month\" title=\"The Mythical Man-Month\">The Mythical Man-Month</a></i>. According to Brooks, there is an incremental person who, when added to a project, makes it take more, not less time. This is similar to the general law of <a href=\"/wiki/Diminishing_returns\" title=\"Diminishing returns\">diminishing returns</a> in economics.\n</p>\n<div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Explanations\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Explanations</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Exceptions_and_possible_solutions\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Exceptions and possible solutions</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#See_also\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">See also</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#Notes\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Notes</span></a></li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#References\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">References</span></a></li>\n</ul>\n</div>\n\n<h2><span class=\"mw-headline\" id=\"Explanations\">Explanations</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Brooks%27s_law&amp;action=edit&amp;section=1\" title=\"Edit section: Explanations\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>According to Brooks himself, the law is an \"outrageous oversimplification\",<sup id=\"cite_ref-BROOKS_1-1\" class=\"reference\"><a href=\"#cite_note-BROOKS-1\">&#91;1&#93;</a></sup> but it captures the general rule. Brooks points to the main factors that explain why it works this way:\n</p>\n<ol><li>It takes some time for the people added to a project to become <a href=\"/wiki/Productivity\" title=\"Productivity\">productive</a>. Brooks calls this the \"<a href=\"/wiki/Ramp_up\" class=\"mw-redirect\" title=\"Ramp up\">ramp up</a>\" time. Software projects are complex <a href=\"/wiki/Engineering\" title=\"Engineering\">engineering</a> endeavors, and new workers on the project must first become educated about the work that has preceded them; this education requires diverting resources already working on the project, temporarily diminishing their productivity while the new workers are not yet contributing meaningfully. Each new worker also needs to integrate with a team composed of several engineers who must educate the new worker in their area of expertise in the code base, day by day. In addition to reducing the contribution of experienced workers (because of the need to train), new workers may even make negative contributions, for example, if they introduce bugs that move the project further from completion.</li>\n<li><a href=\"/w/index.php?title=Communication_overhead&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Communication overhead (page does not exist)\">Communication overheads</a> increase as the number of people increases. Due to <a href=\"/wiki/Combinatorial_explosion_(communication)\" class=\"mw-redirect\" title=\"Combinatorial explosion (communication)\">combinatorial explosion</a>, the number of different <a href=\"/wiki/Communication_channel\" title=\"Communication channel\">communication channels</a> increases rapidly with the number of people.<sup id=\"cite_ref-3\" class=\"reference\"><a href=\"#cite_note-3\">&#91;3&#93;</a></sup> Everyone working on the same task needs to keep in sync, so as more people are added they spend more time trying to find out what everyone else is doing.</li>\n<li>Limited divisibility of tasks. Adding more people to a highly divisible task, such as cleaning rooms in a hotel, decreases the overall task duration (up to the point where additional workers get in each other's way).  Some tasks are less divisible; Brooks points out that while it takes one woman nine months to make one baby, \"nine women can't make a baby in one month\".</li></ol>\n<h2><span class=\"mw-headline\" id=\"Exceptions_and_possible_solutions\">Exceptions and possible solutions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Brooks%27s_law&amp;action=edit&amp;section=2\" title=\"Edit section: Exceptions and possible solutions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>There are some key points in Brooks' law that allow exceptions and open the door for possible solutions.<sup id=\"cite_ref-4\" class=\"reference\"><a href=\"#cite_note-4\">&#91;4&#93;</a></sup><sup id=\"cite_ref-5\" class=\"reference\"><a href=\"#cite_note-5\">&#91;5&#93;</a></sup>\n</p><p>The first point is to note that Brooks' law only applies to projects that are already late.<sup id=\"cite_ref-6\" class=\"reference\"><a href=\"#cite_note-6\">&#91;6&#93;</a></sup> Projects can be brought back into (or kept in) control if people are added earlier in the process.<sup id=\"cite_ref-7\" class=\"reference\"><a href=\"#cite_note-7\">&#91;7&#93;</a></sup> It is also important to determine if the project is really late, or if the schedule was originally overly optimistic. Scheduling mistakes account for a large number of late projects. Correcting the schedule is the best way to have a meaningful and reliable time frame for the project's completion.<sup id=\"cite_ref-8\" class=\"reference\"><a href=\"#cite_note-8\">&#91;8&#93;</a></sup>\n</p><p>The quantity, quality and role of the people added to the project also must be taken into consideration. One simple way to circumvent the law on an overrun project is to add more people than needed, in such a way that the extra capacity compensates the training and communication overhead.<sup id=\"cite_ref-9\" class=\"reference\"><a href=\"#cite_note-9\">&#91;9&#93;</a></sup> Good <a href=\"/wiki/Programmer\" title=\"Programmer\">programmers</a> or specialists can be added with less overhead for training.<sup id=\"cite_ref-10\" class=\"reference\"><a href=\"#cite_note-10\">&#91;10&#93;</a></sup> People can be added to do other tasks related with the project, for example, <a href=\"/wiki/Quality_assurance\" title=\"Quality assurance\">quality assurance</a> or documentation; given that the task is clear, ramp up time is minimized.<sup id=\"cite_ref-11\" class=\"reference\"><a href=\"#cite_note-11\">&#91;11&#93;</a></sup>\n</p><p>The modern practices of <a href=\"/wiki/Continuous_integration\" title=\"Continuous integration\">continuous integration</a>, <a href=\"/wiki/Test-driven_development\" title=\"Test-driven development\">test-driven development</a>, and <a href=\"/wiki/Iterative_development\" class=\"mw-redirect\" title=\"Iterative development\">iterative development</a> significantly reduce the inter-developer communication overhead, and thus allow for better scalability.<sup id=\"cite_ref-12\" class=\"reference\"><a href=\"#cite_note-12\">&#91;12&#93;</a></sup> New tools for software development and documentation also help to minimize the ramp up time, making it simpler for new programmers to get involved in the work. <a href=\"/wiki/Design_pattern_(computer_science)\" class=\"mw-redirect\" title=\"Design pattern (computer science)\">Design patterns</a> simplify the distribution of work, because the entire team can do its part within the framework provided by that pattern. The design pattern defines the rules that the programmers follow, simplifies communication through the use of a standard language, and provides consistency and scalability. Finally, good segmentation helps by minimizing the communication overhead between team members. Smaller sub-problems are solved by a smaller team, and a top-level team is responsible for systems integration. For this method to work, the segmentation of the problem must be done correctly in the first place; if done incorrectly, this can make the problem worse, not better, by impeding <a href=\"/wiki/Communication\" title=\"Communication\">communication</a> between programmers working on parts of the problem which are actually closely coupled, even when the project plan has decreed that they are not.\n</p><p>A way to finish a project is to invert Brooks' Law. This is the <b>Bermuda plan</b>, when 90% of the developers are removed (\"send them to <a href=\"/wiki/Bermuda\" title=\"Bermuda\">Bermuda</a>\") and the remaining 10% complete the software.<sup id=\"cite_ref-shea1984_13-0\" class=\"reference\"><a href=\"#cite_note-shea1984-13\">&#91;13&#93;</a></sup>\n</p>\n<h2><span class=\"mw-headline\" id=\"See_also\">See also</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Brooks%27s_law&amp;action=edit&amp;section=3\" title=\"Edit section: See also\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<ul><li><a href=\"/wiki/Death_march_(project_management)\" title=\"Death march (project management)\">Death march</a></li>\n<li><a href=\"/wiki/Anti-pattern\" title=\"Anti-pattern\">Anti-pattern</a></li>\n<li><a href=\"/wiki/List_of_eponymous_laws\" title=\"List of eponymous laws\">List of eponymous laws</a></li>\n<li><a href=\"/wiki/List_of_software_development_philosophies\" title=\"List of software development philosophies\">List of software development philosophies</a></li></ul>\n<h2><span class=\"mw-headline\" id=\"Notes\">Notes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Brooks%27s_law&amp;action=edit&amp;section=4\" title=\"Edit section: Notes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div class=\"reflist columns references-column-width\" style=\"-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;\">\n<ol class=\"references\">\n<li id=\"cite_note-BROOKS-1\"><span class=\"mw-cite-backlink\">^ <a href=\"#cite_ref-BROOKS_1-0\"><sup><i><b>a</b></i></sup></a> <a href=\"#cite_ref-BROOKS_1-1\"><sup><i><b>b</b></i></sup></a></span> <span class=\"reference-text\">Frederick P. Brooks, Jr. <i><a href=\"/wiki/The_Mythical_Man-Month\" title=\"The Mythical Man-Month\">The Mythical Man-Month</a></i>. 1995 [1975]. Addison-Wesley.</span>\n</li>\n<li id=\"cite_note-2\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-2\">^</a></b></span> <span class=\"reference-text\">Maggie Fox NBC News, October 21, 2013, <a rel=\"nofollow\" class=\"external text\" href=\"http://www.nbcnews.com/health/better-use-phone-why-obamacare-website-such-fail-8C11433702\">Better use the phone: Why Obamacare website is such a fail</a>. Accessed Oct 21, 2013. \"And sending in too many of the \"best and the brightest\u2019 might not be the right fix, either, software experts note. They often cite Brooks\u2019s Law, which holds that adding people to a project slows it down.\"</span>\n</li>\n<li id=\"cite_note-3\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-3\">^</a></b></span> <span class=\"reference-text\">James Taylor, \"A Survival Guide for Project Managers\", 2nd edition, AMACOM<sup class=\"noprint Inline-Template\" style=\"margin-left:0.1em; white-space:nowrap;\">&#91;<i><a href=\"/wiki/Wikipedia:Please_clarify\" title=\"Wikipedia:Please clarify\"><span title=\"The text near this tag may need clarification or removal of jargon. (June 2015)\">clarification needed</span></a></i>&#93;</sup>, 2006, <a href=\"/wiki/International_Standard_Book_Number\" title=\"International Standard Book Number\">ISBN</a>&#160;<a href=\"/wiki/Special:BookSources/978-0814408773\" title=\"Special:BookSources/978-0814408773\">978-0814408773</a>, p. 21.</span>\n</li>\n<li id=\"cite_note-4\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-4\">^</a></b></span> <span class=\"reference-text\">\"In spite of Brooks' law, adding people to a late project remains commonplace\" ... \"I have evangelized this well-worn software engineering chestnut many times myself, but I no longer think it's true\". (McConnell, 1999)</span>\n</li>\n<li id=\"cite_note-5\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-5\">^</a></b></span> <span class=\"reference-text\">\"The trouble is that there are important exceptions that many people do not take the time to consider when using Brooks' law to justify something\". (Berkun, 2006)</span>\n</li>\n<li id=\"cite_note-6\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-6\">^</a></b></span> <span class=\"reference-text\">\"Implicit in those projects is that it applies only to the final phases of a project. The question is, How do you know whether you're in a project's final phases?\" (McConnell, 1999)</span>\n</li>\n<li id=\"cite_note-7\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-7\">^</a></b></span> <span class=\"reference-text\">\"We have found that adding people to a late project will always increase its cost, but the project may not always be late since there may be sufficient <a href=\"/wiki/Schedule_(project_management)\" title=\"Schedule (project management)\">schedule</a> to absorb them and the project may not be at maximum staffing. Only under certain degree of sequential constraints among project tasks will the project be delayed.\" (Hsia, Hsu, Kung, 1999)</span>\n</li>\n<li id=\"cite_note-8\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-8\">^</a></b></span> <span class=\"reference-text\">Late chaotic projects are likely to be much later than the project manager thinks&#160;\u2013 project completion isn't three weeks away, it's six months away. Go ahead and add staff. You'll have time for them to become productive. Your project will still be later than your plan, but that's not a result of Brooks' law. It's a result of underestimating the project in the first place.\" (McConnell, 1999)</span>\n</li>\n<li id=\"cite_note-9\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-9\">^</a></b></span> <span class=\"reference-text\">\"Gordon and Lamb studied Brooks' law and suggested that the best way to recover from a slipping schedule is to add more people than might be expected to be necessary, and to add them early.\" (Hsia, Hsu, Kung, 1999)</span>\n</li>\n<li id=\"cite_note-10\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-10\">^</a></b></span> <span class=\"reference-text\">\"The law assumes that all added labour is equal, which is not true. Given the choice of adding a good programmer, who knows the code base and is friends with half the team, I'd consider it.\" (Berkun, 2006)</span>\n</li>\n<li id=\"cite_note-11\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-11\">^</a></b></span> <span class=\"reference-text\">\"The sad but popular approach is to throw people in without much explanation and let everyone figure it out for themselves. But if the manager clarifies why Sally and Rupert are joining, and defines good roles for them, with input from the team, they'll be set up to make a smooth transition.\" (Berkun, 2006)</span>\n</li>\n<li id=\"cite_note-12\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-12\">^</a></b></span> <span class=\"reference-text\"><cite class=\"citation web\">Bakal, Martin R.; Althouse, Jennifer; Verma, Paridhi (14 August 2012). <a rel=\"nofollow\" class=\"external text\" href=\"http://www.ibm.com/developerworks/rational/library/continuous-integration-agile-development/\">\"Continuous integration in agile development: How agile methods, continuous integration, and test-driven enhance design and development of complex systems\"</a>. <i>IBM developerWorks</i><span class=\"reference-accessdate\">. Retrieved <span class=\"nowrap\">25 September</span> 2015</span>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=IBM+developerWorks&amp;rft.atitle=Continuous+integration+in+agile+development%3A+How+agile+methods%2C+continuous+integration%2C+and+test-driven+enhance+design+and+development+of+complex+systems&amp;rft.date=2012-08-14&amp;rft.aulast=Bakal&amp;rft.aufirst=Martin+R.&amp;rft.au=Althouse%2C+Jennifer&amp;rft.au=Verma%2C+Paridhi&amp;rft_id=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Frational%2Flibrary%2Fcontinuous-integration-agile-development%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABrooks%27s+law\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></span>\n</li>\n<li id=\"cite_note-shea1984-13\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-shea1984_13-0\">^</a></b></span> <span class=\"reference-text\"><cite class=\"citation journal\">Shea, Tom (7 May 1984). <a rel=\"nofollow\" class=\"external text\" href=\"https://books.google.com/books?id=ti4EAAAAMBAJ&amp;pg=PA48&amp;dq=vaporware&amp;cd=1#v=onepage&amp;q=vaporware\">\"Developers Unveil 'Vaporware<span style=\"padding-right:0.2em;\">'</span>\"</a>. <i>InfoWorld</i>. InfoWorld Media Group. <b>6</b> (19): 48. <a href=\"/wiki/International_Standard_Serial_Number\" title=\"International Standard Serial Number\">ISSN</a>&#160;<a rel=\"nofollow\" class=\"external text\" href=\"//www.worldcat.org/issn/0199-6649\">0199-6649</a><span class=\"reference-accessdate\">. Retrieved <span class=\"nowrap\">2010-04-13</span></span>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=InfoWorld&amp;rft.atitle=Developers+Unveil+%27Vaporware%27&amp;rft.volume=6&amp;rft.issue=19&amp;rft.pages=48&amp;rft.date=1984-05-07&amp;rft.issn=0199-6649&amp;rft.aulast=Shea&amp;rft.aufirst=Tom&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3Dti4EAAAAMBAJ%26pg%3DPA48%26dq%3Dvaporware%26cd%3D1%23v%3Donepage%26q%3Dvaporware&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABrooks%27s+law\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></span>\n</li>\n</ol></div>\n<h2><span class=\"mw-headline\" id=\"References\">References</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Brooks%27s_law&amp;action=edit&amp;section=5\" title=\"Edit section: References\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<style data-mw-deduplicate=\"TemplateStyles:r853264625\">.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}</style><div class=\"refbegin columns references-column-count references-column-count-2\" style=\"-moz-column-count: 2; -webkit-column-count: 2; column-count: 2;\">\n<ul><li>Steve McConnell. \"Brooks' Law Repealed,\" IEEE Software, vol. 16, no. 6, pp.&#160;6\u20138, Nov/Dec, 1999. Also available at the authors website (<a rel=\"nofollow\" class=\"external text\" href=\"http://www.stevemcconnell.com/ieeesoftware/eic08.htm\">Brooks's law repealed?</a>).</li>\n<li>Pei Hsia, Chih-tung Hsu, David C. Kung. \"Brooks's law Revisited: A System Dynamics Approach,\" compsac, p.&#160;370, Twenty-Third Annual International Computer Software and Applications Conference, 1999.</li>\n<li>R. L. Gordon and J. C. Lamb. \"A Close Look at Brooks' Law,\" Datamation, June 977, pp.&#160;81\u201386.</li>\n<li><cite class=\"citation web\">Berkun, Scott (January 11, 2006). <a rel=\"nofollow\" class=\"external text\" href=\"http://www.scottberkun.com/blog/2006/exceptions-to-brooks-law\">\"Exceptions to Brooks' Law\"</a><span class=\"reference-accessdate\">. Retrieved <span class=\"nowrap\">2008-07-28</span></span>.</cite><span title=\"ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Exceptions+to+Brooks%27+Law&amp;rft.date=2006-01-11&amp;rft.au=Berkun%2C+Scott&amp;rft_id=http%3A%2F%2Fwww.scottberkun.com%2Fblog%2F2006%2Fexceptions-to-brooks-law&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABrooks%27s+law\" class=\"Z3988\"><span style=\"display:none;\">&#160;</span></span></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"http://www.galorath.com/wp/brooks-law-is-applicable-to-many-collaborative-people-activities.php\">Brooks law Is Applicable To Many Collaborative People Activities</a></li></ul>\n</div>\n\n<!-- \nNewPP limit report\nParsed by mw1243\nCached time: 20180909162123\nCache expiry: 1900800\nDynamic content: false\nCPU time usage: 0.148 seconds\nReal time usage: 0.204 seconds\nPreprocessor visited node count: 751/1000000\nPreprocessor generated node count: 0/1500000\nPost\u2010expand include size: 9829/2097152 bytes\nTemplate argument size: 987/2097152 bytes\nHighest expansion depth: 16/40\nExpensive parser function count: 1/500\nUnstrip recursion depth: 0/20\nUnstrip post\u2010expand size: 8944/5000000 bytes\nNumber of Wikibase entities loaded: 0/400\nLua time usage: 0.050/10.000 seconds\nLua memory usage: 2.56 MB/50 MB\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%  167.956      1 -total\n 86.59%  145.426      1 Template:Reflist\n 34.78%   58.414      1 Template:Clarify\n 26.79%   45.000      1 Template:Fix-span\n 22.33%   37.503      2 Template:Cite_web\n 16.17%   27.161      1 Template:ISBN\n 15.27%   25.650      2 Template:Category_handler\n  9.25%   15.528      1 Template:Replace\n  9.19%   15.432      1 Template:Refbegin\n  6.79%   11.398      1 Template:Catalog_lookup_link\n-->\n\n<!-- Saved in parser cache with key enwiki:pcache:idhash:229070-0!canonical and timestamp 20180909162122 and revision id 852548073\n -->\n</div>"},"langlinks":[{"lang":"cs","url":"https://cs.wikipedia.org/wiki/Brooksovo_pravidlo","langname":"Czech","autonym":"\u010de\u0161tina","*":"Brooksovo pravidlo"},{"lang":"da","url":"https://da.wikipedia.org/wiki/Brooks%27_lov","langname":"Danish","autonym":"dansk","*":"Brooks' lov"},{"lang":"es","url":"https://es.wikipedia.org/wiki/Ley_de_Brooks","langname":"Spanish","autonym":"espa\u00f1ol","*":"Ley de Brooks"},{"lang":"fr","url":"https://fr.wikipedia.org/wiki/Loi_de_Brooks","langname":"French","autonym":"fran\u00e7ais","*":"Loi de Brooks"},{"lang":"ko","url":"https://ko.wikipedia.org/wiki/%EB%B8%8C%EB%A3%A9%EC%8A%A4%EC%9D%98_%EB%B2%95%EC%B9%99","langname":"Korean","autonym":"\ud55c\uad6d\uc5b4","*":"\ube0c\ub8e9\uc2a4\uc758 \ubc95\uce59"},{"lang":"it","url":"https://it.wikipedia.org/wiki/Legge_di_Brooks","langname":"Italian","autonym":"italiano","*":"Legge di Brooks"},{"lang":"hu","url":"https://hu.wikipedia.org/wiki/Brooks-t%C3%B6rv%C3%A9ny","langname":"Hungarian","autonym":"magyar","*":"Brooks-t\u00f6rv\u00e9ny"},{"lang":"ja","url":"https://ja.wikipedia.org/wiki/%E3%83%96%E3%83%AB%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%E6%B3%95%E5%89%87","langname":"Japanese","autonym":"\u65e5\u672c\u8a9e","*":"\u30d6\u30eb\u30c3\u30af\u30b9\u306e\u6cd5\u5247"},{"lang":"pl","url":"https://pl.wikipedia.org/wiki/Prawo_Brooksa","langname":"Polish","autonym":"polski","*":"Prawo Brooksa"}],"categories":[{"sortkey":"","hidden":"","*":"Wikipedia_articles_needing_clarification_from_June_2015"},{"sortkey":"Brooks' law","*":"Adages"},{"sortkey":"Brooks' law","*":"Computer_architecture_statements"},{"sortkey":"Brooks' law","*":"Computing_culture"},{"sortkey":"Brooks' law","*":"Software_project_management"},{"sortkey":"Brooks' law","*":"Words_and_phrases_introduced_in_1975"},{"sortkey":"Brooks' law","*":"Collaboration"},{"sortkey":"Brooks' law","*":"Waste_of_resources"},{"sortkey":"Brooks' law","*":"Eponymous_scientific_concepts"}],"links":[{"ns":14,"exists":"","*":"Category:Wikipedia articles needing clarification from June 2015"},{"ns":0,"exists":"","*":"Anti-pattern"},{"ns":0,"exists":"","*":"Bermuda"},{"ns":0,"exists":"","*":"Combinatorial explosion (communication)"},{"ns":0,"exists":"","*":"Communication"},{"ns":0,"exists":"","*":"Communication channel"},{"ns":0,"exists":"","*":"Continuous integration"},{"ns":0,"exists":"","*":"Death march (project management)"},{"ns":0,"exists":"","*":"Design pattern (computer science)"},{"ns":0,"exists":"","*":"Diminishing returns"},{"ns":0,"exists":"","*":"Engineering"},{"ns":0,"exists":"","*":"Fred Brooks"},{"ns":0,"exists":"","*":"Human resources"},{"ns":0,"exists":"","*":"International Standard Book Number"},{"ns":0,"exists":"","*":"International Standard Serial Number"},{"ns":0,"exists":"","*":"Iterative development"},{"ns":0,"exists":"","*":"List of eponymous laws"},{"ns":0,"exists":"","*":"List of software development philosophies"},{"ns":0,"exists":"","*":"Productivity"},{"ns":0,"exists":"","*":"Programmer"},{"ns":0,"exists":"","*":"Quality assurance"},{"ns":0,"exists":"","*":"Ramp up"},{"ns":0,"exists":"","*":"Schedule (project management)"},{"ns":0,"exists":"","*":"Software project management"},{"ns":0,"exists":"","*":"Test-driven development"},{"ns":0,"exists":"","*":"The Mythical Man-Month"},{"ns":0,"*":"Communication overhead"},{"ns":4,"exists":"","*":"Wikipedia:Please clarify"}],"templates":[{"ns":10,"exists":"","*":"Template:Reflist"},{"ns":10,"exists":"","*":"Template:Column-width"},{"ns":10,"exists":"","*":"Template:Clarify"},{"ns":10,"exists":"","*":"Template:Fix-span"},{"ns":10,"exists":"","*":"Template:Category handler"},{"ns":10,"exists":"","*":"Template:Fix/category"},{"ns":10,"exists":"","*":"Template:Replace"},{"ns":10,"exists":"","*":"Template:Delink"},{"ns":10,"exists":"","*":"Template:ISBN"},{"ns":10,"exists":"","*":"Template:Catalog lookup link"},{"ns":10,"exists":"","*":"Template:Trim"},{"ns":10,"exists":"","*":"Template:Yesno-no"},{"ns":10,"exists":"","*":"Template:Yesno"},{"ns":10,"exists":"","*":"Template:Error-small"},{"ns":10,"exists":"","*":"Template:Tl"},{"ns":10,"exists":"","*":"Template:Main other"},{"ns":10,"exists":"","*":"Template:Cite web"},{"ns":10,"exists":"","*":"Template:Cite journal"},{"ns":10,"exists":"","*":"Template:Refbegin"},{"ns":10,"exists":"","*":"Template:Refbegin/styles.css"},{"ns":10,"exists":"","*":"Template:Column-count"},{"ns":10,"exists":"","*":"Template:Refend"},{"ns":828,"exists":"","*":"Module:Unsubst"},{"ns":828,"exists":"","*":"Module:Category handler"},{"ns":828,"exists":"","*":"Module:Yesno"},{"ns":828,"exists":"","*":"Module:Category handler/data"},{"ns":828,"exists":"","*":"Module:Category handler/config"},{"ns":828,"exists":"","*":"Module:Category handler/shared"},{"ns":828,"exists":"","*":"Module:Category handler/blacklist"},{"ns":828,"exists":"","*":"Module:Namespace detect/data"},{"ns":828,"exists":"","*":"Module:Namespace detect/config"},{"ns":828,"exists":"","*":"Module:Arguments"},{"ns":828,"exists":"","*":"Module:String"},{"ns":828,"exists":"","*":"Module:Delink"},{"ns":828,"exists":"","*":"Module:No globals"},{"ns":828,"exists":"","*":"Module:Check isxn"},{"ns":828,"exists":"","*":"Module:Error"},{"ns":828,"exists":"","*":"Module:Citation/CS1"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Configuration"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Whitelist"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Utilities"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Date validation"},{"ns":828,"exists":"","*":"Module:Citation/CS1/Identifiers"},{"ns":828,"exists":"","*":"Module:Citation/CS1/COinS"},{"ns":828,"exists":"","*":"Module:Check for unknown parameters"}],"images":[],"externallinks":["http://www.nbcnews.com/health/better-use-phone-why-obamacare-website-such-fail-8C11433702","http://www.ibm.com/developerworks/rational/library/continuous-integration-agile-development/","https://books.google.com/books?id=ti4EAAAAMBAJ&pg=PA48&dq=vaporware&cd=1#v=onepage&q=vaporware","//www.worldcat.org/issn/0199-6649","http://www.stevemcconnell.com/ieeesoftware/eic08.htm","http://www.scottberkun.com/blog/2006/exceptions-to-brooks-law","http://www.galorath.com/wp/brooks-law-is-applicable-to-many-collaborative-people-activities.php"],"sections":[{"toclevel":1,"level":"2","line":"Explanations","number":"1","index":"1","fromtitle":"Brooks's_law","byteoffset":981,"anchor":"Explanations"},{"toclevel":1,"level":"2","line":"Exceptions and possible solutions","number":"2","index":"2","fromtitle":"Brooks's_law","byteoffset":2998,"anchor":"Exceptions_and_possible_solutions"},{"toclevel":1,"level":"2","line":"See also","number":"3","index":"3","fromtitle":"Brooks's_law","byteoffset":8582,"anchor":"See_also"},{"toclevel":1,"level":"2","line":"Notes","number":"4","index":"4","fromtitle":"Brooks's_law","byteoffset":8745,"anchor":"Notes"},{"toclevel":1,"level":"2","line":"References","number":"5","index":"5","fromtitle":"Brooks's_law","byteoffset":8776,"anchor":"References"}],"parsewarnings":[],"displaytitle":"Brooks's law","iwlinks":[],"properties":[{"name":"defaultsort","*":"Brooks' law"},{"name":"wikibase_item","*":"Q850028"}]}}