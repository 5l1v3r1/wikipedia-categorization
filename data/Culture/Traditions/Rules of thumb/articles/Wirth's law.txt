Wirth's law, also known as Page's law, Gates' law and May's law, is a computing adage which states that software is getting slower more rapidly than hardware becomes faster. The law is named after Niklaus Wirth, who discussed it in his 1995 paper, "A Plea for Lean Software".    Wirth attributed the saying to Martin Reiser, who, in the preface to his book on the Oberon System, wrote: "The hope is that the progress in hardware will cure all software ills. However, a critical observer may observe that software manages to outgrow hardware in size and sluggishness."  Other observers had noted this for some time before; indeed the trend was becoming obvious as early as 1987.  He states two contributing factors to the acceptance of ever-growing software as: "rapidly growing hardware performance," and "customers' ignorance of features that are essential versus nice-to-have".  Enhanced user convenience and functionality supposedly justify the increased size of software, but Wirth argues that people are increasingly misinterpreting complexity as sophistication, that “these details are cute but not essential, and they have a hidden cost”.  As a result, he calls for the creation of "leaner" software, and pioneered the development of Oberon, a software system developed between 1986 and 1989 based on nothing but hardware. Its primary goal was to show that software can be developed with a fraction of the memory capacity and processor power usually required, without sacrificing flexibility, functionality, or user convenience.  The law was restated in 2009 and attributed to Larry Page, founder of Google. It has been referred to as Page's law.  The first use of that name is attributed to Sergey Brin at the Google I/O Conference 2009.  Other common forms use the names of the leading hardware and software companies of the 1990s (Intel & Microsoft), or their CEOs (Andy Grove & Bill Gates):  Gates' law is a variant on Wirth's law, borrowing its name from Bill Gates,  co-founder of Microsoft. It is an observation that the speed of commercial software generally slows by 50% every 18 months, thereby negating all the benefits of Moore's law. This could occur for a variety of reasons: "featuritis", "code cruft", developer laziness, or a management turnover whose design philosophy does not coincide with the previous manager.  May's law, named after David May, is a variant stating: 