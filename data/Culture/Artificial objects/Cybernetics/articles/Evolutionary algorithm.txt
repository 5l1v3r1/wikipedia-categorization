In artificial intelligence, an evolutionary algorithm (EA) is a subset of evolutionary computation , a generic population-based metaheuristic optimization algorithm. An EA uses mechanisms inspired by biological evolution, such as reproduction, mutation, recombination, and selection. Candidate solutions to the optimization problem play the role of individuals in a population, and the fitness function determines the quality of the solutions (see also loss function). Evolution of the population then takes place after the repeated application of the above operators. Evolutionary algorithms often perform well approximating solutions to all types of problems because they ideally do not make any assumption about the underlying fitness landscape. Techniques from evolutionary algorithms applied to the modeling of biological evolution are generally limited to explorations of microevolutionary processes and planning models based upon cellular processes. In most real applications of EAs, computational complexity is a prohibiting factor.  In fact, this computational complexity is due to fitness function evaluation. Fitness approximation is one of the solutions to overcome this difficulty. However, seemingly simple EA can solve often complex problems ; therefore, there may be no direct link between algorithm complexity and problem complexity. Step One: Generate the initial population of individuals randomly. (First generation) Step Two: Evaluate the fitness of each individual in that population (time limit, sufficient fitness achieved, etc.) Step Three: Repeat the following regenerational steps until termination: Similar techniques differ in genetic representation and other implementation details, and the nature of the particular applied problem. A possible limitation[according to whom?] of many evolutionary algorithms is their lack of a clear genotype-phenotype distinction. In nature, the fertilized egg cell undergoes a complex process known as embryogenesis to become a mature phenotype. This indirect encoding is believed to make the genetic search more robust (i.e. reduce the probability of fatal mutations), and also may improve the evolvability of the organism.   Such indirect (a.k.a. generative or developmental) encodings also enable evolution to exploit the regularity in the environment.  Recent work in the field of artificial embryogeny, or artificial developmental systems, seeks to address these concerns. And gene expression programming successfully explores a genotype-phenotype system, where the genotype consists of linear multigenic chromosomes of fixed length and the phenotype consists of multiple expression trees or computer programs of different sizes and shapes. [improper synthesis?] Swarm algorithms[clarification needed] include The computer simulations Tierra and Avida attempt to model macroevolutionary dynamics.       A two-population EA search over a constrained Rosenbrock function with bounded global optimum. A two-population EA search over a constrained Rosenbrock function. Global optimum is not bounded. Estimation of distribution algorithm over Keane's function A two-population EA search of a bounded optima of Simionescu's function. 